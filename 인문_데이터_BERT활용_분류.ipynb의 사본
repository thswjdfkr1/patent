{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1c2NOBk9ofnDjgsY6gCllgrIz7z6hC5S-","timestamp":1716031257889},{"file_id":"https://github.com/Esantomi/digital-humanities/blob/main/%EC%9D%B8%EB%AC%B8%EC%A7%80%EC%8B%9D%EC%B2%98%EB%A6%AC%EC%99%80%ED%86%B5%EA%B3%84/07_%EB%94%A5%EB%9F%AC%EB%8B%9D_%EC%96%B8%EC%96%B4_%EB%B6%84%EB%A5%98_with_BERT.ipynb","timestamp":1682404695032}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"b2280c5abd394c63966e2b63dba8f61d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d854bd7478b641e8aa41db549fc5b96a","IPY_MODEL_2338027c7ba5424291d722a0a690eec7","IPY_MODEL_7fe659606c7a4b2da9e26dfe0035cf30"],"layout":"IPY_MODEL_74789f52789f4802b53d89069b9830a4"}},"d854bd7478b641e8aa41db549fc5b96a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4226a1ab3fef47a986043eff730e6027","placeholder":"​","style":"IPY_MODEL_3362a82e490244378a77fcf1b6f1b753","value":"tokenizer_config.json: 100%"}},"2338027c7ba5424291d722a0a690eec7":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_df9e0a3650904d04b37499d90356d9be","max":49,"min":0,"orientation":"horizontal","style":"IPY_MODEL_098f386a8fa14b19900acce8f5714863","value":49}},"7fe659606c7a4b2da9e26dfe0035cf30":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_7acc34e86dd241a5b7224dae2e15f86d","placeholder":"​","style":"IPY_MODEL_2025e41a13b545cd9e585e4ed21c90e0","value":" 49.0/49.0 [00:00&lt;00:00, 1.31kB/s]"}},"74789f52789f4802b53d89069b9830a4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4226a1ab3fef47a986043eff730e6027":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3362a82e490244378a77fcf1b6f1b753":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"df9e0a3650904d04b37499d90356d9be":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"098f386a8fa14b19900acce8f5714863":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"7acc34e86dd241a5b7224dae2e15f86d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2025e41a13b545cd9e585e4ed21c90e0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d2b8004db88c41dd9bde5d8c508cf8ad":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5cfbc8ac8453412b871efc1346606283","IPY_MODEL_c555769be0ab44fa8e7fb7686f6a667d","IPY_MODEL_d3969734789a42849caced26e6d264c4"],"layout":"IPY_MODEL_93de99b7535b4ac3973dc37075fd78eb"}},"5cfbc8ac8453412b871efc1346606283":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3f79d57c09c0409eb2ce90304accf29f","placeholder":"​","style":"IPY_MODEL_9de76da3fd5f46848624af2d7f9b1696","value":"vocab.txt: 100%"}},"c555769be0ab44fa8e7fb7686f6a667d":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_d389aaa2215e4fbc8582a4c45afec34a","max":995526,"min":0,"orientation":"horizontal","style":"IPY_MODEL_5fbae5f712ac4a628407511fc8b26331","value":995526}},"d3969734789a42849caced26e6d264c4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_309df7e360af4e3197f7c54ec4cbcb5c","placeholder":"​","style":"IPY_MODEL_35f54504bd1d452697e71cc7c98025f2","value":" 996k/996k [00:00&lt;00:00, 4.16MB/s]"}},"93de99b7535b4ac3973dc37075fd78eb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3f79d57c09c0409eb2ce90304accf29f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9de76da3fd5f46848624af2d7f9b1696":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d389aaa2215e4fbc8582a4c45afec34a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5fbae5f712ac4a628407511fc8b26331":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"309df7e360af4e3197f7c54ec4cbcb5c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"35f54504bd1d452697e71cc7c98025f2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c2facae476e14f80bb4c2cfc6921732c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d29af976e39544e0a35134147cec7ee4","IPY_MODEL_aea7ab2ace25471eb31b7dab25a98682","IPY_MODEL_4261727196984bf5aa769e371eb303b9"],"layout":"IPY_MODEL_af9773e498044498a71f91046f5fb73e"}},"d29af976e39544e0a35134147cec7ee4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_736d0d17666b45de8672f384250d39bc","placeholder":"​","style":"IPY_MODEL_d1e7118597d54ebba3480a8346da8a09","value":"tokenizer.json: 100%"}},"aea7ab2ace25471eb31b7dab25a98682":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_709a29f7a9f1413c9dd26baa062a134e","max":1961828,"min":0,"orientation":"horizontal","style":"IPY_MODEL_d02f65eca1234ac2ae69a19531ac2029","value":1961828}},"4261727196984bf5aa769e371eb303b9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ec1dfd60a0cb4553b423e19728a2c2a8","placeholder":"​","style":"IPY_MODEL_22b5de5ad3e44be19ea591d4cca14844","value":" 1.96M/1.96M [00:00&lt;00:00, 25.6MB/s]"}},"af9773e498044498a71f91046f5fb73e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"736d0d17666b45de8672f384250d39bc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d1e7118597d54ebba3480a8346da8a09":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"709a29f7a9f1413c9dd26baa062a134e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d02f65eca1234ac2ae69a19531ac2029":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"ec1dfd60a0cb4553b423e19728a2c2a8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"22b5de5ad3e44be19ea591d4cca14844":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"7c88ed548b3f4b3fbbae6783383a29e2":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_79c9e24ce62b4a3b99d3332cb47ce4af","IPY_MODEL_489e216639a043869a317dd90db1d6fa","IPY_MODEL_4e44b47c29624944baff34908720a2eb"],"layout":"IPY_MODEL_aa8622725b3741d6b86e5a05e57c8761"}},"79c9e24ce62b4a3b99d3332cb47ce4af":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_98f700c6f132457383f14f9e107377a8","placeholder":"​","style":"IPY_MODEL_4c03150ef15c4afa988352f7b22e68cd","value":"config.json: 100%"}},"489e216639a043869a317dd90db1d6fa":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_afc3eb470fe34a93adfc064a885bf101","max":625,"min":0,"orientation":"horizontal","style":"IPY_MODEL_d85f442b302940ddb6df3007cfa5544d","value":625}},"4e44b47c29624944baff34908720a2eb":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5f251ab69241497098b2676824245287","placeholder":"​","style":"IPY_MODEL_8057280cc91f450d903f94041b0e8903","value":" 625/625 [00:00&lt;00:00, 14.6kB/s]"}},"aa8622725b3741d6b86e5a05e57c8761":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"98f700c6f132457383f14f9e107377a8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4c03150ef15c4afa988352f7b22e68cd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"afc3eb470fe34a93adfc064a885bf101":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d85f442b302940ddb6df3007cfa5544d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"5f251ab69241497098b2676824245287":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8057280cc91f450d903f94041b0e8903":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f34f68549e2f431cb8f6d1907045316a":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_72c249e3ac594fd5a0de32c75d515538","IPY_MODEL_4d2a69a5888d46418129523da0cfa0e2","IPY_MODEL_9eadf62e19b8408b858a45ea2e816712"],"layout":"IPY_MODEL_a98d2f717a4d405ca3a4777959795a29"}},"72c249e3ac594fd5a0de32c75d515538":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9a727696d7954071b6269a3a7c0aefd1","placeholder":"​","style":"IPY_MODEL_625a03389da84322a1d0f6dc299cc7be","value":"model.safetensors: 100%"}},"4d2a69a5888d46418129523da0cfa0e2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_65a80817ccfd42ec9bfc9c32f7241973","max":714290682,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e6fdda2ffca94409939536c3fdfc3a20","value":714290682}},"9eadf62e19b8408b858a45ea2e816712":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_edb2ff3404d74a4da9be3e144fe51732","placeholder":"​","style":"IPY_MODEL_c002411a8f364a8eaeddcf96e6852e71","value":" 714M/714M [00:06&lt;00:00, 137MB/s]"}},"a98d2f717a4d405ca3a4777959795a29":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9a727696d7954071b6269a3a7c0aefd1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"625a03389da84322a1d0f6dc299cc7be":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"65a80817ccfd42ec9bfc9c32f7241973":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e6fdda2ffca94409939536c3fdfc3a20":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"edb2ff3404d74a4da9be3e144fe51732":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c002411a8f364a8eaeddcf96e6852e71":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"55F3hYP0gFKg"},"source":["# BERT을 통한 딥러닝 분류 학습\n","\n","사용 알고리즘:  BERT Fine-Tuning Tutorial with PyTorch\n","-> https://mccormickml.com/2019/07/22/BERT-fine-tuning\n","\n","사용 데이터: Naver sentiment movie corpus v1.0\n","https://github.com/e9t/nsmc.git\n","\n","* 본 내용은 https://github.com/deepseasw/bert-naver-movie-review 를 토대로 수정하였습니다. deepseasw님께 감사 드립니다.\n"]},{"cell_type":"markdown","source":["## 환경 설정"],"metadata":{"id":"SMj99TL8KtI_"}},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yJfNqmbhf-PK","outputId":"e687f684-2813-481b-ebeb-5a11f498fa18","executionInfo":{"status":"ok","timestamp":1716190192157,"user_tz":-540,"elapsed":32679,"user":{"displayName":"손정락","userId":"10892662232752168928"}}},"source":["#@title 환경설정\n","\n","# Hugging Face의 트랜스포머 모델을 설치\n","!pip install transformers\n","\n","import sys\n","\n","from IPython.display import clear_output\n","clear_output(wait=True)\n","\n","## 관련 라이브러스 설치\n","import tensorflow as tf\n","\n","import torch\n","from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n","\n","from transformers import BertTokenizer\n","from transformers import BertForSequenceClassification, AdamW, BertConfig\n","from transformers import get_linear_schedule_with_warmup\n","\n","import keras\n","# from keras.preprocessing.sequence import pad_sequences  # path removed\n","from keras.utils import pad_sequences\n","\n","from sklearn.model_selection import train_test_split\n","\n","import pandas as pd\n","import numpy as np\n","import random\n","import time\n","import datetime\n","\n","clear_output()\n","\n","print('Python version : ', sys.version)\n","print('TensorFlow version : ', tf.__version__)\n","print('Keras version : ', keras.__version__)"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Python version :  3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]\n","TensorFlow version :  2.15.0\n","Keras version :  2.15.0\n"]}]},{"cell_type":"markdown","metadata":{"id":"6hhNxGZlhDgo"},"source":["## 데이터 불러오기"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":736},"id":"WbltToQGE9xB","outputId":"e12e3e33-9d13-429c-b2da-3f5affa25ec2","executionInfo":{"status":"ok","timestamp":1716190201133,"user_tz":-540,"elapsed":4454,"user":{"displayName":"손정락","userId":"10892662232752168928"}}},"source":["#@title 데이터 불러오기 - 조중동/한경 기사 데이터\n","파일ID = '1Md8XHJADQWzO1mcl0ZnOm5ijp_cL8G4F'  #@param {type: \"string\"}\n","파일저장이름 = 'rawdata.tsv'  #@param {type: \"string\"}\n","\n","# 문서 ID로 실제 파일 불러오는 법\n","## 조중동한경_정치만_각각_20220510-20230523 : https://drive.google.com/file/d/1Md8XHJADQWzO1mcl0ZnOm5ijp_cL8G4F/\n","\n","!wget --load-cookies ~/cookies.txt \"https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies ~/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id={파일ID}' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\\1\\n/p')&id={파일ID}\" -O {파일저장이름} && rm -rf ~/cookies.txt\n","\n","print(파일저장이름+\"을 정상적으로 가져왔습니다.\")\n","\n","# pandas import\n","import pandas as pd\n","\n","# 파일을 DataFrame으로 전환\n","df = pd.read_csv(파일저장이름, sep='\\t')\n","df = df.dropna(axis=0)\n","df"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["--2024-05-20 07:30:33--  https://docs.google.com/uc?export=download&confirm=&id=1Md8XHJADQWzO1mcl0ZnOm5ijp_cL8G4F\n","Resolving docs.google.com (docs.google.com)... 74.125.20.113, 74.125.20.138, 74.125.20.100, ...\n","Connecting to docs.google.com (docs.google.com)|74.125.20.113|:443... connected.\n","HTTP request sent, awaiting response... 303 See Other\n","Location: https://drive.usercontent.google.com/download?id=1Md8XHJADQWzO1mcl0ZnOm5ijp_cL8G4F&export=download [following]\n","--2024-05-20 07:30:33--  https://drive.usercontent.google.com/download?id=1Md8XHJADQWzO1mcl0ZnOm5ijp_cL8G4F&export=download\n","Resolving drive.usercontent.google.com (drive.usercontent.google.com)... 173.194.203.132, 2607:f8b0:400e:c02::84\n","Connecting to drive.usercontent.google.com (drive.usercontent.google.com)|173.194.203.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 7737408 (7.4M) [application/octet-stream]\n","Saving to: ‘rawdata.tsv’\n","\n","rawdata.tsv         100%[===================>]   7.38M  --.-KB/s    in 0.09s   \n","\n","2024-05-20 07:30:34 (80.0 MB/s) - ‘rawdata.tsv’ saved [7737408/7737408]\n","\n","rawdata.tsv을 정상적으로 가져왔습니다.\n"]},{"output_type":"execute_result","data":{"text/plain":["      label                                               text\n","0      경향신문             이낙연 “미국도 할 말 하는 동맹 원할 것 한국 정치 길 잃은 상태”\n","1      경향신문  윤재옥 “공직자윤리법, 국회의원만이라도 빠르게 가상자산 신고할 수 있도록 수정안 낼 것”\n","2      경향신문                     이정미 “노무현 정신 기준에서 정치권 스스로 돌아봐야”\n","3      경향신문                          민주당, 성추행 고소당한 부천시의원 조사 착수\n","4      경향신문                   민주당, 박민식 부적격 기류  인사청문보고서 채택 불발되나\n","...     ...                                                ...\n","81248  동아일보                            국정원장 김규현 내정 북미라인 외교-안보통\n","81249  동아일보                    한동훈 “국민 보시기 불편 송구하다” 자녀 의혹 첫 사과\n","81250  동아일보             윤석열 대통령, 공식 임기 시작 0시 용산벙커에서 합참 보고 첫 업무\n","81251  동아일보                                  [사설]윤석열 대통령에게 바란다\n","81252  동아일보                [사설]한동훈, 딸 재산 의혹 국민 눈높이에서 겸허하게 해명하라\n","\n","[81253 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-adc863de-64c0-4350-ae8c-daab217d373b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>경향신문</td>\n","      <td>이낙연 “미국도 할 말 하는 동맹 원할 것 한국 정치 길 잃은 상태”</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>경향신문</td>\n","      <td>윤재옥 “공직자윤리법, 국회의원만이라도 빠르게 가상자산 신고할 수 있도록 수정안 낼 것”</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>경향신문</td>\n","      <td>이정미 “노무현 정신 기준에서 정치권 스스로 돌아봐야”</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>경향신문</td>\n","      <td>민주당, 성추행 고소당한 부천시의원 조사 착수</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>경향신문</td>\n","      <td>민주당, 박민식 부적격 기류  인사청문보고서 채택 불발되나</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>81248</th>\n","      <td>동아일보</td>\n","      <td>국정원장 김규현 내정 북미라인 외교-안보통</td>\n","    </tr>\n","    <tr>\n","      <th>81249</th>\n","      <td>동아일보</td>\n","      <td>한동훈 “국민 보시기 불편 송구하다” 자녀 의혹 첫 사과</td>\n","    </tr>\n","    <tr>\n","      <th>81250</th>\n","      <td>동아일보</td>\n","      <td>윤석열 대통령, 공식 임기 시작 0시 용산벙커에서 합참 보고 첫 업무</td>\n","    </tr>\n","    <tr>\n","      <th>81251</th>\n","      <td>동아일보</td>\n","      <td>[사설]윤석열 대통령에게 바란다</td>\n","    </tr>\n","    <tr>\n","      <th>81252</th>\n","      <td>동아일보</td>\n","      <td>[사설]한동훈, 딸 재산 의혹 국민 눈높이에서 겸허하게 해명하라</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>81253 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-adc863de-64c0-4350-ae8c-daab217d373b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-adc863de-64c0-4350-ae8c-daab217d373b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-adc863de-64c0-4350-ae8c-daab217d373b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-01ea6907-5e5b-4429-b374-992ac5a74106\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-01ea6907-5e5b-4429-b374-992ac5a74106')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-01ea6907-5e5b-4429-b374-992ac5a74106 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_7fc1683d-c509-45cf-b97b-204dce055933\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7fc1683d-c509-45cf-b97b-204dce055933 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 81253,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"\\uc870\\uc120\\uc77c\\ubcf4\",\n          \"\\ub3d9\\uc544\\uc77c\\ubcf4\",\n          \"\\uc911\\uc559\\uc77c\\ubcf4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 80845,\n        \"samples\": [\n          \"DPR, \\ub7ec \\ub300\\uc0ac\\uad00 \\uac1c\\uad00 \\u201c\\ubd81\\ud55c\\uacfc \\ub3c5\\ub9bd\\uad6d \\uc2b9\\uc778 \\ud611\\uc0c1 \\uc9c4\\ud589 \\uc911\\u201d\",\n          \"The Presidential Office Received a Report on the IRA Before the President\\u2019s Phone Call with Speaker Pelosi\",\n          \"\\uc774\\uc7ac\\uba85, \\u5c39 \\ubc1c\\uc5b8 \\ub17c\\ub780\\uc5d0 \\u201c\\ub0a0\\ub9ac\\uba74\\uc73c\\ub85c \\ub4e4\\ub9b4 \\uc218\\ub3c4 \\uc0ac\\uc2e4 \\ud655\\uc778\\ud574\\uc57c\\u201d\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_sJzeaX-Io4K","outputId":"c5c341d6-f3d8-46b8-a539-87770c0b9576","executionInfo":{"status":"ok","timestamp":1716190202808,"user_tz":-540,"elapsed":493,"user":{"displayName":"손정락","userId":"10892662232752168928"}}},"source":["#@title 데이터 선택하기\n","\n","데이터량 = \"81253\"  #@param ['100', '1000', '5000','10000', '50000', '81253']\n","데이터량 = int(데이터량)\n","\n","df = df.iloc[:데이터량]\n","print(df)\n","\n","print(df[\"label\"].groupby([df[\"label\"]]).count())"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["      label                                               text\n","0      경향신문             이낙연 “미국도 할 말 하는 동맹 원할 것 한국 정치 길 잃은 상태”\n","1      경향신문  윤재옥 “공직자윤리법, 국회의원만이라도 빠르게 가상자산 신고할 수 있도록 수정안 낼 것”\n","2      경향신문                     이정미 “노무현 정신 기준에서 정치권 스스로 돌아봐야”\n","3      경향신문                          민주당, 성추행 고소당한 부천시의원 조사 착수\n","4      경향신문                   민주당, 박민식 부적격 기류  인사청문보고서 채택 불발되나\n","...     ...                                                ...\n","81248  동아일보                            국정원장 김규현 내정 북미라인 외교-안보통\n","81249  동아일보                    한동훈 “국민 보시기 불편 송구하다” 자녀 의혹 첫 사과\n","81250  동아일보             윤석열 대통령, 공식 임기 시작 0시 용산벙커에서 합참 보고 첫 업무\n","81251  동아일보                                  [사설]윤석열 대통령에게 바란다\n","81252  동아일보                [사설]한동훈, 딸 재산 의혹 국민 눈높이에서 겸허하게 해명하라\n","\n","[81253 rows x 2 columns]\n","label\n","경향신문    18534\n","동아일보    14910\n","조선일보    16401\n","중앙일보    20000\n","한겨레     11408\n","Name: label, dtype: int64\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yjx1mpFCTsIK","outputId":"cdd80a99-5d6c-46a0-a1d3-4eb685b2405a","executionInfo":{"status":"ok","timestamp":1716190207657,"user_tz":-540,"elapsed":3322,"user":{"displayName":"손정락","userId":"10892662232752168928"}}},"source":["## 텍스트로 되어 있는 라벨을 숫자로 변환\n","df.loc[df.label=='조선일보', 'label']='0'\n","df.loc[df.label=='중앙일보', 'label']='0'\n","df.loc[df.label=='동아일보', 'label']='0'\n","df.loc[df.label=='한겨레', 'label']='1'\n","df.loc[df.label=='경향신문', 'label']='1'\n","# df.loc[df.label=='분류추가', 'label']='2'\n","\n","## label 값을 숫자로 전환\n","df['label'] = df['label'].apply(pd.to_numeric)\n","\n","print(df)"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["       label                                               text\n","0          1             이낙연 “미국도 할 말 하는 동맹 원할 것 한국 정치 길 잃은 상태”\n","1          1  윤재옥 “공직자윤리법, 국회의원만이라도 빠르게 가상자산 신고할 수 있도록 수정안 낼 것”\n","2          1                     이정미 “노무현 정신 기준에서 정치권 스스로 돌아봐야”\n","3          1                          민주당, 성추행 고소당한 부천시의원 조사 착수\n","4          1                   민주당, 박민식 부적격 기류  인사청문보고서 채택 불발되나\n","...      ...                                                ...\n","81248      0                            국정원장 김규현 내정 북미라인 외교-안보통\n","81249      0                    한동훈 “국민 보시기 불편 송구하다” 자녀 의혹 첫 사과\n","81250      0             윤석열 대통령, 공식 임기 시작 0시 용산벙커에서 합참 보고 첫 업무\n","81251      0                                  [사설]윤석열 대통령에게 바란다\n","81252      0                [사설]한동훈, 딸 재산 의혹 국민 눈높이에서 겸허하게 해명하라\n","\n","[81253 rows x 2 columns]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VvM9RbCjTs_3","outputId":"618227e3-13c0-4937-aee7-c6b85487f77e","executionInfo":{"status":"ok","timestamp":1716190208791,"user_tz":-540,"elapsed":5,"user":{"displayName":"손정락","userId":"10892662232752168928"}}},"source":["#@title 훈련 데이터 비율 선택하기\n","\n","훈련데이터비율 = 0.9  #@param ['0.9', '0.8', '0.7', '0.6']\n","\n","## 훈련데이터와 테스트데이터로 분리\n","train=df.sample(frac=훈련데이터비율,random_state=200)\n","test=df.drop(train.index)\n","\n","train.drop_duplicates(subset = ['text'], inplace=True) # text 열에서 중복인 내용이 있다면 중복 제거\n","train['text'] = train['text'].str.replace(\"[^ㄱ-ㅎㅏ-ㅣ가-힣 ]\",\"\") # 정규 표현식 수행\n","train['text'].replace('', np.nan, inplace=True) # 공백은 Null 값으로 변경\n","train = train.dropna(how='any') # Null 값 제거\n","print('전처리 후 훈련용 샘플의 개수 :',len(train))\n","\n","test.drop_duplicates(subset = ['text'], inplace=True) # text 열에서 중복인 내용이 있다면 중복 제거\n","test['text'] = test['text'].str.replace(\"[^ㄱ-ㅎㅏ-ㅣ가-힣 ]\",\"\") # 정규 표현식 수행\n","test['text'].replace('', np.nan, inplace=True) # 공백은 Null 값으로 변경\n","test = test.dropna(how='any') # Null 값 제거\n","print('전처리 후 테스트용 샘플의 개수 :',len(test))\n"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["전처리 후 훈련용 샘플의 개수 : 72782\n","전처리 후 테스트용 샘플의 개수 : 8117\n"]}]},{"cell_type":"markdown","metadata":{"id":"Zq-34YOnjyiC"},"source":["## 데이터 전처리 with bert"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qap3wqEBiCuW","outputId":"7ca1d3c6-203f-4b69-96c5-11b58505056d","executionInfo":{"status":"ok","timestamp":1716190215958,"user_tz":-540,"elapsed":320,"user":{"displayName":"손정락","userId":"10892662232752168928"}}},"source":["#@title 학습 데이터 처리 - BERT형식으로 변환\n","\n","# 리뷰 문장 추출\n","sentences = train['text']\n","print('')\n","print('##### 원본 데이터 #####')\n","print(sentences[:10])\n","\n","  # BERT의 입력 형식에 맞게 변환\n","sentences = [\"[CLS] \" + str(sentence) + \" [SEP]\" for sentence in sentences]\n","print('')\n","print('##### Bert 형식으로 변환 #####')\n","print(sentences[:10])\n","\n","\n","  # 라벨 추출\n","labels = train['label'].values\n","\n","print('')\n","print('##### 라벨 추출 #####')\n","print(labels)"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","##### 원본 데이터 #####\n","55262            윤, 취임 1주년 날에도 ‘전 정권’ 탓 “잘못 바로잡아온 시간”\n","5367                   황운하, 김기현 향해 “윤 대통령의 꼬리 잘치는 푸들”\n","67660         한동훈 “돈봉투 수사가 정치 탄압? 승부조작 수사하면 스포츠 탄압이냐”\n","77751              고민정 “文전용기 민간인 안타” 박민영 “김영철 탄 사진은?”\n","61333              신재생에너지 뜯어본다는 감사원, 작년 “문제없다” 결론 바꿀까\n","35862               태영호 김재원 버티기에 與 징계수위 고민, 최고회의 또 취소\n","12447    통일부 5년 만에 감소 ‘담대한 구상’ ‘북한인권 증진’ 힘싣기[2023예산안]\n","699                한 일 재무장관 회의도 가동 채비 통상 갈등 해소 물꼬 트이나\n","74905                 “검찰 두려워 할 사람은 범죄자뿐” 한동훈 어록집 나온다\n","55892           “송영길 있어야 할 곳, 프랑스 아닌 국민 앞” 민주당, 귀국 촉구\n","Name: text, dtype: object\n","\n","##### Bert 형식으로 변환 #####\n","['[CLS] 윤, 취임 1주년 날에도 ‘전 정권’ 탓 “잘못 바로잡아온 시간” [SEP]', '[CLS] 황운하, 김기현 향해 “윤 대통령의 꼬리 잘치는 푸들” [SEP]', '[CLS] 한동훈 “돈봉투 수사가 정치 탄압? 승부조작 수사하면 스포츠 탄압이냐” [SEP]', '[CLS] 고민정 “文전용기 민간인 안타” 박민영 “김영철 탄 사진은?” [SEP]', '[CLS] 신재생에너지 뜯어본다는 감사원, 작년 “문제없다” 결론 바꿀까 [SEP]', '[CLS] 태영호 김재원 버티기에 與 징계수위 고민, 최고회의 또 취소 [SEP]', '[CLS] 통일부 5년 만에 감소 ‘담대한 구상’ ‘북한인권 증진’ 힘싣기[2023예산안] [SEP]', '[CLS] 한 일 재무장관 회의도 가동 채비 통상 갈등 해소 물꼬 트이나 [SEP]', '[CLS] “검찰 두려워 할 사람은 범죄자뿐” 한동훈 어록집 나온다 [SEP]', '[CLS] “송영길 있어야 할 곳, 프랑스 아닌 국민 앞” 민주당, 귀국 촉구 [SEP]']\n","\n","##### 라벨 추출 #####\n","[1 1 0 ... 1 0 0]\n"]}]},{"cell_type":"markdown","metadata":{"id":"wfLrcP0ej6l0"},"source":["![대체 텍스트](https://mino-park7.github.io/images/2019/02/bert-input-representation.png)\n","\n","BERT의 입력은 위의 그림과 같은 형식입니다. Classification을 뜻하는 [CLS] 심볼이 제일 앞에 삽입됩니다. 파인튜닝시 출력에서 이 위치의 값을 사용하여 분류를 합니다. [SEP]은 Separation을 가리키는데, 두 문장을 구분하는 역할을 합니다. 이 예제에서는 문장이 하나이므로 [SEP]도 하나만 넣습니다.\n","<br>\n","<br>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":292,"referenced_widgets":["b2280c5abd394c63966e2b63dba8f61d","d854bd7478b641e8aa41db549fc5b96a","2338027c7ba5424291d722a0a690eec7","7fe659606c7a4b2da9e26dfe0035cf30","74789f52789f4802b53d89069b9830a4","4226a1ab3fef47a986043eff730e6027","3362a82e490244378a77fcf1b6f1b753","df9e0a3650904d04b37499d90356d9be","098f386a8fa14b19900acce8f5714863","7acc34e86dd241a5b7224dae2e15f86d","2025e41a13b545cd9e585e4ed21c90e0","d2b8004db88c41dd9bde5d8c508cf8ad","5cfbc8ac8453412b871efc1346606283","c555769be0ab44fa8e7fb7686f6a667d","d3969734789a42849caced26e6d264c4","93de99b7535b4ac3973dc37075fd78eb","3f79d57c09c0409eb2ce90304accf29f","9de76da3fd5f46848624af2d7f9b1696","d389aaa2215e4fbc8582a4c45afec34a","5fbae5f712ac4a628407511fc8b26331","309df7e360af4e3197f7c54ec4cbcb5c","35f54504bd1d452697e71cc7c98025f2","c2facae476e14f80bb4c2cfc6921732c","d29af976e39544e0a35134147cec7ee4","aea7ab2ace25471eb31b7dab25a98682","4261727196984bf5aa769e371eb303b9","af9773e498044498a71f91046f5fb73e","736d0d17666b45de8672f384250d39bc","d1e7118597d54ebba3480a8346da8a09","709a29f7a9f1413c9dd26baa062a134e","d02f65eca1234ac2ae69a19531ac2029","ec1dfd60a0cb4553b423e19728a2c2a8","22b5de5ad3e44be19ea591d4cca14844","7c88ed548b3f4b3fbbae6783383a29e2","79c9e24ce62b4a3b99d3332cb47ce4af","489e216639a043869a317dd90db1d6fa","4e44b47c29624944baff34908720a2eb","aa8622725b3741d6b86e5a05e57c8761","98f700c6f132457383f14f9e107377a8","4c03150ef15c4afa988352f7b22e68cd","afc3eb470fe34a93adfc064a885bf101","d85f442b302940ddb6df3007cfa5544d","5f251ab69241497098b2676824245287","8057280cc91f450d903f94041b0e8903"]},"id":"2J384Nt7j8nY","outputId":"5206c2f5-2430-46d4-9008-eec7a375c3fe","executionInfo":{"status":"ok","timestamp":1716190242088,"user_tz":-540,"elapsed":23559,"user":{"displayName":"손정락","userId":"10892662232752168928"}}},"source":["#@title 학습 데이터 처리 - BERT로 토큰화하기\n","\n","bert모델 = \"bert-base-multilingual-cased\"  #@param ['bert-base-multilingual-cased', 'bert-large-cased', 'bert-base-chinese']\n","\n","#\"bert-base-uncased\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-config.json\",\n","#\"bert-large-uncased\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-large-uncased-config.json\",\n","#\"bert-base-cased\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-cased-config.json\",\n","#\"bert-large-cased\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-large-cased-config.json\",\n","#\"bert-base-multilingual-uncased\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-multilingual-uncased-config.json\",\n","#\"bert-base-multilingual-cased\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-multilingual-cased-config.json\",\n","#\"bert-base-chinese\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-chinese-config.json\",\n","#\"bert-base-german-cased\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-german-cased-config.json\",\n","#\"bert-large-uncased-whole-word-masking\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-large-uncased-whole-word-masking-config.json\",\n","#\"bert-large-cased-whole-word-masking\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-large-cased-whole-word-masking-config.json\",\n","#\"bert-large-uncased-whole-word-masking-finetuned-squad\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-large-uncased-whole-word-masking-finetuned-squad-config.json\",\n","#\"bert-large-cased-whole-word-masking-finetuned-squad\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-large-cased-whole-word-masking-finetuned-squad-config.json\",\n","#\"bert-base-cased-finetuned-mrpc\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-cased-finetuned-mrpc-config.json\",\n","#\"bert-base-german-dbmdz-cased\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-german-dbmdz-cased-config.json\",\n","#\"bert-base-german-dbmdz-uncased\": \"https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-german-dbmdz-uncased-config.json\",\n","#\"bert-base-japanese\": \"https://s3.amazonaws.com/models.huggingface.co/bert/cl-tohoku/bert-base-japanese-config.json\",\n","#\"bert-base-japanese-whole-word-masking\": \"https://s3.amazonaws.com/models.huggingface.co/bert/cl-tohoku/bert-base-japanese-whole-word-masking-config.json\",\n","#\"bert-base-japanese-char\": \"https://s3.amazonaws.com/models.huggingface.co/bert/cl-tohoku/bert-base-japanese-char-config.json\",\n","#\"bert-base-japanese-char-whole-word-masking\": \"https://s3.amazonaws.com/models.huggingface.co/bert/cl-tohoku/bert-base-japanese-char-whole-word-masking-config.json\",\n","#\"bert-base-finnish-cased-v1\": \"https://s3.amazonaws.com/models.huggingface.co/bert/TurkuNLP/bert-base-finnish-cased-v1/config.json\",\n","#\"bert-base-finnish-uncased-v1\": \"https://s3.amazonaws.com/models.huggingface.co/bert/TurkuNLP/bert-base-finnish-uncased-v1/config.json\",\n","\n","\n","# BERT의 토크나이저로 문장을 토큰으로 분리\n","tokenizer = BertTokenizer.from_pretrained(bert모델, do_lower_case=False)\n","tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]\n","\n","print (sentences[0])\n","print (tokenized_texts[0])"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:88: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["tokenizer_config.json:   0%|          | 0.00/49.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b2280c5abd394c63966e2b63dba8f61d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["vocab.txt:   0%|          | 0.00/996k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d2b8004db88c41dd9bde5d8c508cf8ad"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["tokenizer.json:   0%|          | 0.00/1.96M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c2facae476e14f80bb4c2cfc6921732c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["config.json:   0%|          | 0.00/625 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7c88ed548b3f4b3fbbae6783383a29e2"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["[CLS] 윤, 취임 1주년 날에도 ‘전 정권’ 탓 “잘못 바로잡아온 시간” [SEP]\n","['[CLS]', '윤', ',', '취임', '1', '##주', '##년', '날', '##에도', '[UNK]', '전', '정', '##권', '[UNK]', '탓', '[UNK]', '잘', '##못', '바로', '##잡', '##아', '##온', '시', '##간', '[UNK]', '[SEP]']\n"]}]},{"cell_type":"markdown","metadata":{"id":"SFHdtLXakBFY"},"source":["BERT는 형태소분석으로 토큰을 분리하지 않습니다. WordPiece라는 통계적인 방식을 사용합니다. 한 단어내에서 자주 나오는 글자들을 붙여서 하나의 토큰으로 만듭니다. 이렇게 하면 언어에 상관없이 토큰을 생성할 수 있다는 장점이 있습니다. 또한 신조어 같이 사전에 없는 단어를 처리하기도 좋습니다.\n","\n","위의 결과에서 ## 기호는 앞 토큰과 이어진다는 표시입니다. 토크나이저는 여러 언어의 데이터를 기반으로 만든 'bert-base-multilingual-cased'를 사용합니다. 그래서 한글도 처리가 가능합니다.\n","<br>\n","<br>"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":504},"id":"t3BRIdawlCRj","outputId":"cb7d5f7a-26a6-4ea5-9a2c-2f118103de12","executionInfo":{"status":"ok","timestamp":1716190250094,"user_tz":-540,"elapsed":805,"user":{"displayName":"손정락","userId":"10892662232752168928"}}},"source":["#@title 전처리를 위한 문장 길이 조회\n","\n","## 전처리를 위한 기본 텍스트 정보를 탐색합니다.\n","\n","최대길이 = \"64\"  #@param ['32', '64', '128', '256']\n","최대길이 = int(최대길이)\n","\n","print('문장의 최대 길이 :',max(len(l) for l in sentences))\n","## 문장의 최대 길이는 가장 긴 문장의 길이를 의미합니다.\n","\n","print('문장의 평균 길이 :',sum(map(len, sentences))/len(sentences))\n","## 문장의 평균 길이는 문장 길이의 평균값을 의미합니다.\n","\n","import matplotlib.pyplot as plt\n","\n","plt.hist([len(s) for s in sentences], bins=50)\n","plt.xlabel('length of samples')\n","plt.ylabel('number of samples')\n","plt.show()\n","\n","## 문장 길이 전체 그래프를 살펴보면, 문장의 전체 분포를 볼 수 있습니다.\n","## 대다수의 문장이 50자 이하인 것을 알 수 있습니다.\n","\n","\n","def below_threshold_len(max_len, nested_list):\n","  cnt = 0\n","  for s in nested_list:\n","    if(len(s) <= max_len):\n","        cnt = cnt + 1\n","  print('전체 샘플 중 길이가 %s 이하인 샘플의 비율: %s'%(max_len, (cnt / len(nested_list))*100))\n","\n","\n","max_len = 최대길이\n","below_threshold_len(max_len, sentences)\n","\n","## max_leb(문장 최대 길이)가 128일때 선택되는 전체 데이터량을 의미합니다.\n","## 현재값은 95.92로 대략 6%를 제외한 모든 데이터가 선택된 것을 확인할 수 있습니다."],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["문장의 최대 길이 : 180\n","문장의 평균 길이 : 45.901060701821876\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["전체 샘플 중 길이가 64 이하인 샘플의 비율: 98.77442224725894\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2pCbTyqOj-Xn","outputId":"7285ce0a-d621-4ed3-9bef-c946b00bf5e8","executionInfo":{"status":"ok","timestamp":1716190254887,"user_tz":-540,"elapsed":3715,"user":{"displayName":"손정락","userId":"10892662232752168928"}},"cellView":"form"},"source":["#@title 토큰 인덱스 변환, 패딩 및 어텐션 마스크 세팅\n","\n","# 입력 토큰의 최대 시퀀스 길이\n","MAX_LEN = 최대길이\n","\n","## 입력 문장의 최대 길이를 지정해줍니다.\n","## 물론 어떤 리뷰는 128자 이상이기도 합니다. 하지만 효율성을 위해서 고정해줍니다.\n","## MAX_LEN을 256, 512 등 더 크게 변경할 수도 있습니다. 그러면 처리 시간이 더 걸립니다. 대신 정확도는 상승합니다.\n","## 반대로 MAX_LEN을 64, 32 등 더 작게 변경할 수도 있습니다. 그러면 처리 시간은 짦아지고, 정확도는 줄어듭니다.\n","## MAX_LEN에 \"정답\"은 없습니다. 적절한 길이를 선택해야 합니다.\n","\n","# 토큰을 숫자 인덱스로 변환\n","input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]\n","\n","# 문장을 MAX_LEN 길이에 맞게 자르고, 모자란 부분을 패딩 0으로 채움\n","## 패딩이란 MAX_LEN보다 짦은 문장에 적용합니다. 문장 길이가 120이라면 8개가 패딩으로 채워지게 됩니다.\n","input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype=\"long\", truncating=\"post\", padding=\"post\")\n","\n","print(input_ids[0])\n","\n","# 어텐션 마스크 초기화\n","attention_masks = []\n","\n","# 어텐션 마스크를 패딩이 아니면 1, 패딩이면 0으로 설정\n","# 패딩 부분은 BERT 모델에서 어텐션을 수행하지 않아 속도 향상\n","for seq in input_ids:\n","    seq_mask = [float(i>0) for i in seq]\n","    attention_masks.append(seq_mask)\n","\n","print(attention_masks[0])"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[   101   9627    117  71963    122  16323  10954   8985  35979    100\n","   9665   9670  25347    100   9851    100   9654 118940  71433 119199\n","  16985  37093   9485  18784    100    102      0      0      0      0\n","      0      0      0      0      0      0      0      0      0      0\n","      0      0      0      0      0      0      0      0      0      0\n","      0      0      0      0      0      0      0      0      0      0\n","      0      0      0      0]\n","[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4hv7e7J1kKFO","outputId":"3014b0b6-608a-44c0-c88c-90a1f12017a5","executionInfo":{"status":"ok","timestamp":1716190255875,"user_tz":-540,"elapsed":990,"user":{"displayName":"손정락","userId":"10892662232752168928"}},"cellView":"form"},"source":["#@title 훈련데이터와 검증 데이터 분리 및 배치 세팅\n","\n","검증데이터비율 = \"0.2\"  #@param ['0.1', '0.2', '0.3']\n","\n","배치크기 = \"64\"  #@param ['8', '16', '32', '64', '128', '256']\n","배치크기 = int(배치크기)\n","\n","\n","# 훈련셋과 검증셋으로 분리\n","validation_size = 검증데이터비율\n","## 훈련셋과 검증셋은 9:1로 분리해줍니다. 숫자를 변경하면 비율을 변경할 수 있습니다.\n","\n","random_state = 1\n","## 컴퓨터에서의 분리는 시간값을 토대로 하는 랜덤입니다.\n","## 하지만 완전히 랜덤으로 하면 학습마다 다른 결과가 나오는 문제가 발생합니다.\n","## 이를 통제하기 위해서 랜덤 시작값을 세팅해줍니다.\n","\n","train_inputs, validation_inputs, train_labels, validation_labels = train_test_split(input_ids,\n","                                                                                    labels,\n","                                                                                    random_state=random_state,\n","                                                                                    test_size=0.1)\n","\n","# 어텐션 마스크를 훈련셋과 검증셋으로 분리\n","train_masks, validation_masks, _, _ = train_test_split(attention_masks,\n","                                                       input_ids,\n","                                                       random_state=random_state,\n","                                                       test_size=0.1)\n","\n","# 데이터를 파이토치의 텐서로 변환\n","train_inputs = torch.tensor(train_inputs)\n","train_labels = torch.tensor(train_labels)\n","train_masks = torch.tensor(train_masks)\n","validation_inputs = torch.tensor(validation_inputs)\n","validation_labels = torch.tensor(validation_labels)\n","validation_masks = torch.tensor(validation_masks)\n","\n","print(\"##### 훈련 텍스트의 bert embedding값 #####\")\n","print(train_inputs[0])\n","print(\"##### 훈련 텍스트의 label 값 #####\")\n","print(train_labels[0])\n","print(\"##### 훈련 텍스트의 MASK값 = 패딩 여부 확인 #####\")\n","print(train_masks[0])\n","print(\"##### 검증 텍스트의 bert embedding값 #####\")\n","print(validation_inputs[0])\n","print(\"##### 검증 텍스트의 label 값 #####\")\n","print(validation_labels[0])\n","print(\"##### 검증 텍스트의 MASK값 = 패딩 여부 확인 #####\")\n","print(validation_masks[0])\n","\n","\n","# 배치 사이즈\n","batch_size = 배치크기\n","\n","# 파이토치의 DataLoader로 입력, 마스크, 라벨을 묶어 데이터 설정\n","# 학습시 배치 사이즈 만큼 데이터를 가져옴\n","train_data = TensorDataset(train_inputs, train_masks, train_labels)\n","train_sampler = RandomSampler(train_data)\n","train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)\n","\n","validation_data = TensorDataset(validation_inputs, validation_masks, validation_labels)\n","validation_sampler = SequentialSampler(validation_data)\n","validation_dataloader = DataLoader(validation_data, sampler=validation_sampler, batch_size=batch_size)"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["##### 훈련 텍스트의 bert embedding값 #####\n","tensor([   101,    112,   9297,  13764,   9901,  18778,    112,   9987, 118792,\n","         10459,   8909,  36553,  10459, 119471,   9330,  30842,  18623,    107,\n","          9580, 118762,  83491,  19855,  14279,   9405, 119362,    107,    102,\n","             0,      0,      0,      0,      0,      0,      0,      0,      0,\n","             0,      0,      0,      0,      0,      0,      0,      0,      0,\n","             0,      0,      0,      0,      0,      0,      0,      0,      0,\n","             0,      0,      0,      0,      0,      0,      0,      0,      0,\n","             0])\n","##### 훈련 텍스트의 label 값 #####\n","tensor(0)\n","##### 훈련 텍스트의 MASK값 = 패딩 여부 확인 #####\n","tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n","        1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n","##### 검증 텍스트의 bert embedding값 #####\n","tensor([  101,   112,  9064, 68530,  8908, 14871,   112, 64749,  9568, 31605,\n","        10530,   112,  9627, 40958, 79604, 37824,   112,  9309, 37388,  9879,\n","        18392,  9379, 16617,  8982, 37093, 11903,   102,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0])\n","##### 검증 텍스트의 label 값 #####\n","tensor(0)\n","##### 검증 텍스트의 MASK값 = 패딩 여부 확인 #####\n","tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n","        1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n"]}]},{"cell_type":"code","metadata":{"id":"5PymQ8C8oWRO","cellView":"form","executionInfo":{"status":"ok","timestamp":1716190260322,"user_tz":-540,"elapsed":3170,"user":{"displayName":"손정락","userId":"10892662232752168928"}}},"source":["#@title 테스트 데이터 처리(훈련데이터와 동일)\n","\n","# 리뷰 문장 추출\n","sentences = test['text']\n","\n","# BERT의 입력 형식에 맞게 변환\n","sentences = [\"[CLS] \" + str(sentence) + \" [SEP]\" for sentence in sentences]\n","\n","# 라벨 추출\n","labels = test['label'].values\n","\n","# BERT의 토크나이저로 문장을 토큰으로 분리\n","tokenizer = BertTokenizer.from_pretrained(bert모델, do_lower_case=False)\n","tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]\n","\n","# 토큰을 숫자 인덱스로 변환\n","input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]\n","\n","# 문장을 MAX_LEN 길이에 맞게 자르고, 모자란 부분을 패딩 0으로 채움\n","input_ids = pad_sequences(input_ids, maxlen=최대길이, dtype=\"long\", truncating=\"post\", padding=\"post\")\n","\n","# 어텐션 마스크 초기화\n","attention_masks = []\n","\n","# 어텐션 마스크를 패딩이 아니면 1, 패딩이면 0으로 설정\n","# 패딩 부분은 BERT 모델에서 어텐션을 수행하지 않아 속도 향상\n","for seq in input_ids:\n","    seq_mask = [float(i>0) for i in seq]\n","    attention_masks.append(seq_mask)\n","\n","# 데이터를 파이토치의 텐서로 변환\n","test_inputs = torch.tensor(input_ids)\n","test_labels = torch.tensor(labels)\n","test_masks = torch.tensor(attention_masks)\n","\n","# 파이토치의 DataLoader로 입력, 마스크, 라벨을 묶어 데이터 설정\n","# 학습시 배치 사이즈 만큼 데이터를 가져옴\n","test_data = TensorDataset(test_inputs, test_masks, test_labels)\n","test_sampler = RandomSampler(test_data)\n","test_dataloader = DataLoader(test_data, sampler=test_sampler, batch_size=배치크기)"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rnSRKCfvpKN8"},"source":["## 모델 세팅"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"teKFL712pELo","outputId":"3936dd1a-92fe-46cc-cb63-d9ca77efb568","executionInfo":{"status":"ok","timestamp":1716190263923,"user_tz":-540,"elapsed":285,"user":{"displayName":"손정락","userId":"10892662232752168928"}},"cellView":"form"},"source":["#@title GPU 세팅\n","\n","## 해당 부분에서 에러가 나면, \"런타임 > 런타임 유형 변경 > 하드웨어 가속시 > GPU\"로 변경해야 합니다.\n","\n","# GPU 디바이스 이름 구함\n","device_name = tf.test.gpu_device_name()\n","\n","# GPU 디바이스 이름 검사\n","if device_name == '/device:GPU:0':\n","    print('Found GPU at: {}'.format(device_name))\n","else:\n","    raise SystemError('GPU device not found')\n","\n","# 디바이스 설정\n","if torch.cuda.is_available():\n","    device = torch.device(\"cuda\")\n","    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n","    print('We will use the GPU:', torch.cuda.get_device_name(0))\n","else:\n","    device = torch.device(\"cpu\")\n","    print('No GPU available, using the CPU instead.')"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Found GPU at: /device:GPU:0\n","There are 1 GPU(s) available.\n","We will use the GPU: Tesla T4\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":142,"referenced_widgets":["f34f68549e2f431cb8f6d1907045316a","72c249e3ac594fd5a0de32c75d515538","4d2a69a5888d46418129523da0cfa0e2","9eadf62e19b8408b858a45ea2e816712","a98d2f717a4d405ca3a4777959795a29","9a727696d7954071b6269a3a7c0aefd1","625a03389da84322a1d0f6dc299cc7be","65a80817ccfd42ec9bfc9c32f7241973","e6fdda2ffca94409939536c3fdfc3a20","edb2ff3404d74a4da9be3e144fe51732","c002411a8f364a8eaeddcf96e6852e71"]},"id":"dphPxgdcpRbA","outputId":"a5fd663e-e1fc-4e44-bf33-a05b588699ea","executionInfo":{"status":"ok","timestamp":1716190275337,"user_tz":-540,"elapsed":10148,"user":{"displayName":"손정락","userId":"10892662232752168928"}},"cellView":"form"},"source":["#@title 딥러닝 모델 세팅\n","\n","# 분류를 위한 BERT 모델 생성\n","## 이미 bert를 통한 분류 모델이 만들어져 있습니다. 모델을 불러오기만 하면 됩니다.\n","## num_labels를 통해서 분류 갯수를 지정해줍니다. 저희는 긍정-부정의 2개 분류이기에 2입니다.\n","\n","분류개수 = \"2\"  #@param ['2', '3', '4', '5']\n","분류개수 = int(분류개수)\n","\n","epochs수 = \"3\"  #@param ['2', '3', '4', '5']\n","epochs수 = int(epochs수)\n","\n","model = BertForSequenceClassification.from_pretrained(bert모델, num_labels=분류개수)\n","model.cuda()\n","\n","# 옵티마이저 설정\n","optimizer = AdamW(model.parameters(),\n","                  lr = 2e-5, # 학습률\n","                  eps = 1e-8 # 0으로 나누는 것을 방지하기 위한 epsilon 값\n","                )\n","\n","# 에폭수\n","epochs = epochs수\n","\n","# 총 훈련 스텝 : 배치반복 횟수 * 에폭\n","total_steps = len(train_dataloader) * epochs\n","\n","# 처음에 학습률을 조금씩 변화시키는 스케줄러 생성\n","scheduler = get_linear_schedule_with_warmup(optimizer,\n","                                            num_warmup_steps = 0,\n","                                            num_training_steps = total_steps)"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/714M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f34f68549e2f431cb8f6d1907045316a"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-multilingual-cased and are newly initialized: ['classifier.bias', 'classifier.weight']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","/usr/local/lib/python3.10/dist-packages/transformers/optimization.py:521: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n","  warnings.warn(\n"]}]},{"cell_type":"code","metadata":{"id":"T7JIBmmfYY63","executionInfo":{"status":"ok","timestamp":1716190275338,"user_tz":-540,"elapsed":6,"user":{"displayName":"손정락","userId":"10892662232752168928"}},"cellView":"form","colab":{"base_uri":"https://localhost:8080/"},"outputId":"cdcde469-4b54-4519-bfc3-5eb755520965"},"source":["#@title 딥러닝 모델 간략 보기\n","\n","# Get all of the model's parameters as a list of tuples.\n","params = list(model.named_parameters())\n","\n","print('The BERT model has {:} different named parameters.\\n'.format(len(params)))\n","\n","print('==== Embedding Layer ====\\n')\n","\n","for p in params[0:5]:\n","    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n","\n","print('\\n==== First Transformer ====\\n')\n","\n","for p in params[5:21]:\n","    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n","\n","print('\\n==== Output Layer ====\\n')\n","\n","for p in params[-4:]:\n","    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["The BERT model has 201 different named parameters.\n","\n","==== Embedding Layer ====\n","\n","bert.embeddings.word_embeddings.weight                  (119547, 768)\n","bert.embeddings.position_embeddings.weight                (512, 768)\n","bert.embeddings.token_type_embeddings.weight                (2, 768)\n","bert.embeddings.LayerNorm.weight                              (768,)\n","bert.embeddings.LayerNorm.bias                                (768,)\n","\n","==== First Transformer ====\n","\n","bert.encoder.layer.0.attention.self.query.weight          (768, 768)\n","bert.encoder.layer.0.attention.self.query.bias                (768,)\n","bert.encoder.layer.0.attention.self.key.weight            (768, 768)\n","bert.encoder.layer.0.attention.self.key.bias                  (768,)\n","bert.encoder.layer.0.attention.self.value.weight          (768, 768)\n","bert.encoder.layer.0.attention.self.value.bias                (768,)\n","bert.encoder.layer.0.attention.output.dense.weight        (768, 768)\n","bert.encoder.layer.0.attention.output.dense.bias              (768,)\n","bert.encoder.layer.0.attention.output.LayerNorm.weight        (768,)\n","bert.encoder.layer.0.attention.output.LayerNorm.bias          (768,)\n","bert.encoder.layer.0.intermediate.dense.weight           (3072, 768)\n","bert.encoder.layer.0.intermediate.dense.bias                 (3072,)\n","bert.encoder.layer.0.output.dense.weight                 (768, 3072)\n","bert.encoder.layer.0.output.dense.bias                        (768,)\n","bert.encoder.layer.0.output.LayerNorm.weight                  (768,)\n","bert.encoder.layer.0.output.LayerNorm.bias                    (768,)\n","\n","==== Output Layer ====\n","\n","bert.pooler.dense.weight                                  (768, 768)\n","bert.pooler.dense.bias                                        (768,)\n","classifier.weight                                           (2, 768)\n","classifier.bias                                                 (2,)\n"]}]},{"cell_type":"markdown","metadata":{"id":"Q-ZqbqlZpwJF"},"source":["## 모델 학습"]},{"cell_type":"code","metadata":{"id":"ev0G_fZEpuol","colab":{"base_uri":"https://localhost:8080/"},"outputId":"21c43c22-bf09-49da-901b-b4b1ed3d5f63"},"source":["#@title 딥러닝 학습\n","\n","# 정확도 계산 함수\n","def flat_accuracy(preds, labels):\n","\n","    pred_flat = np.argmax(preds, axis=1).flatten()\n","    labels_flat = labels.flatten()\n","\n","    return np.sum(pred_flat == labels_flat) / len(labels_flat)\n","\n","# 시간 표시 함수\n","def format_time(elapsed):\n","\n","    # 반올림\n","    elapsed_rounded = int(round((elapsed)))\n","\n","    # hh:mm:ss으로 형태 변경\n","    return str(datetime.timedelta(seconds=elapsed_rounded))\n","\n","\n","## 본격적으로 딥러닝 학습을 수행하게 됩니다.\n","## 현재 150000개의 데이터로는 1 epoch 50분 정도의 시간이 소요됩니다.\n","## 4번의 epoch이기에 약 200분, 3시간이 넘는 학습 시간이 필요합니다.\n","## 연습을 하실 때에는 1000개 정도로 데이터량을 줄여서 테스트 해보실 것을 권장드립니다.\n","\n","from tqdm.notebook import tqdm\n","\n","# 재현을 위해 랜덤시드 고정\n","seed_val = 42\n","random.seed(seed_val)\n","np.random.seed(seed_val)\n","torch.manual_seed(seed_val)\n","torch.cuda.manual_seed_all(seed_val)\n","\n","# We'll store a number of quantities such as training and validation loss,\n","# validation accuracy, and timings.\n","training_stats = []\n","\n","# Measure the total training time for the whole run.\n","total_t0 = time.time()\n","\n","# 에폭만큼 반복\n","for epoch_i in range(0, epochs):\n","\n","    # ========================================\n","    #               Training\n","    # ========================================\n","\n","    print(\"\")\n","    print('======== Epoch {:} / {:} ========'.format(epoch_i + 1, epochs))\n","    print('Training...')\n","\n","    # 시작 시간 설정\n","    t0 = time.time()\n","\n","    # Reset the total loss for this epoch.\n","    total_train_loss = 0\n","\n","    # 훈련모드로 변경\n","    model.train()\n","\n","    # 데이터로더에서 배치만큼 반복하여 가져옴\n","    for step, batch in enumerate(train_dataloader):\n","        # 경과 정보 표시 / 매 40  batch 마다\n","        if step % 500 == 0 and not step == 0:\n","            elapsed = format_time(time.time() - t0)\n","            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))\n","\n","        # Unpack this training batch from our dataloader.\n","        #\n","        # As we unpack the batch, we'll also copy each tensor to the GPU using the\n","        # `to` method.\n","        #\n","        # `batch` contains three pytorch tensors:\n","        #   [0]: input ids\n","        #   [1]: attention masks\n","        #   [2]: labels\n","        b_input_ids = batch[0].to(device)\n","        b_input_mask = batch[1].to(device)\n","        b_labels = batch[2].to(device)\n","\n","\n","        # 그래디언트 초기화\n","        model.zero_grad()\n","\n","        # Forward 수행\n","        # Perform a forward pass (evaluate the model on this training batch).\n","        # The documentation for this `model` function is here:\n","        # https://huggingface.co/transformers/v2.2.0/model_doc/bert.html#transformers.BertForSequenceClassification\n","        # It returns different numbers of parameters depending on what arguments\n","        # arge given and what flags are set. For our useage here, it returns\n","        # the loss (because we provided labels) and the \"logits\"--the model\n","        # outputs prior to activation.\n","        output = model(b_input_ids,\n","                             token_type_ids=None,\n","                             attention_mask=b_input_mask,\n","                             labels=b_labels)\n","\n","        # 총 로스 계산\n","        # Accumulate the training loss over all of the batches so that we can\n","        # calculate the average loss at the end. `loss` is a Tensor containing a\n","        # single value; the `.item()` function just returns the Python value\n","        # from the tensor.\n","        loss = output[0]\n","        total_train_loss += loss.item()\n","        logits = output[1]\n","\n","        # Backward 수행으로 그래디언트 계산\n","        # Perform a backward pass to calculate the gradients.\n","        loss.backward()\n","\n","        # 그래디언트 클리핑\n","        # Clip the norm of the gradients to 1.0.\n","        # This is to help prevent the \"exploding gradients\" problem.\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n","\n","        # 그래디언트를 통해 가중치 파라미터 업데이트\n","        # Update parameters and take a step using the computed gradient.\n","        # The optimizer dictates the \"update rule\"--how the parameters are\n","        # modified based on their gradients, the learning rate, etc.\n","        optimizer.step()\n","\n","        # 스케줄러로 학습률 감소\n","        # Update the learning rate.\n","        scheduler.step()\n","\n","        # 그래디언트 초기화\n","        model.zero_grad()\n","\n","    # 평균 로스 계산\n","    # Calculate the average loss over all of the batches.\n","    avg_train_loss = total_train_loss  / len(train_dataloader)\n","\n","    # Measure how long this epoch took.\n","    training_time = format_time(time.time() - t0)\n","\n","    print(\"\")\n","    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n","    print(\"  Training epcoh took: {:}\".format(format_time(time.time() - t0)))\n","\n","    # ========================================\n","    #               Validation\n","    # ========================================\n","\n","    print(\"\")\n","    print(\"Running Validation...\")\n","\n","    #시작 시간 설정\n","    t0 = time.time()\n","\n","    # 평가모드로 변경\n","    model.eval()\n","\n","    # 변수 초기화\n","    # Tracking variables\n","    total_eval_accuracy = 0\n","    total_eval_loss = 0\n","    nb_eval_steps = 0\n","\n","    # 데이터로더에서 배치만큼 반복하여 가져옴\n","    for batch in validation_dataloader:\n","        # 배치를 GPU에 넣음\n","        b_input_ids = batch[0].to(device)\n","        b_input_mask = batch[1].to(device)\n","        b_labels = batch[2].to(device)\n","\n","        # 그래디언트 계산 안함\n","        with torch.no_grad():\n","            # Forward 수행\n","            output = model(b_input_ids,\n","                                   token_type_ids=None,\n","                                   attention_mask=b_input_mask,\n","                                   labels=b_labels)\n","\n","        # 로스 구함\n","        loss = output.loss\n","        total_eval_loss += loss.item()\n","        logits = output.logits\n","\n","        # CPU로 데이터 이동\n","        logits = logits.detach().cpu().numpy()\n","        label_ids = b_labels.to('cpu').numpy()\n","\n","        # 출력 로짓과 라벨을 비교하여 정확도 계산\n","        total_eval_accuracy += flat_accuracy(logits, label_ids)\n","\n","    # Report the final accuracy for this validation run.\n","    avg_val_accuracy = total_eval_accuracy / len(validation_dataloader)\n","    print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n","\n","    # Calculate the average loss over all of the batches.\n","    avg_val_loss = total_eval_loss / len(validation_dataloader)\n","\n","    # Measure how long the validation run took.\n","    validation_time = format_time(time.time() - t0)\n","\n","    print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n","    print(\"  Validation took: {:}\".format(validation_time))\n","\n","    # Record all statistics from this epoch.\n","    training_stats.append(\n","        {\n","            'epoch': epoch_i + 1,\n","            'Training Loss': avg_train_loss,\n","            'Valid. Loss': avg_val_loss,\n","            'Training. Accur': avg_val_accuracy,\n","            'Valid. Accur.': avg_val_accuracy,\n","            'Training Time': training_time,\n","            'Validation Time': validation_time\n","        }\n","    )\n","\n","print(\"\")\n","print(\"Training complete!\")\n","\n","print(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","======== Epoch 1 / 3 ========\n","Training...\n"]}]},{"cell_type":"code","metadata":{"id":"dZY-VW2TYkox","cellView":"form"},"source":["#@title 딥러닝 학습 간단 보기\n","\n","import pandas as pd\n","\n","# Display floats with two decimal places.\n","# pd.set_option('precision', 2)  # deprecated\n","pd.set_option(\"display.max_columns\", 100)\n","\n","# Create a DataFrame from our training statistics.\n","df_stats = pd.DataFrame(data=training_stats)\n","\n","# Use the 'epoch' as the row index.\n","df_stats = df_stats.set_index('epoch')\n","\n","# A hack to force the column headers to wrap.\n","#df = df.style.set_table_styles([dict(selector=\"th\",props=[('max-width', '70px')])])\n","\n","# Display the table.\n","print(df_stats.to_string())\n","\n","\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","import seaborn as sns\n","\n","# Use plot styling from seaborn.\n","sns.set(style='darkgrid')\n","\n","# Increase the plot size and font size.\n","sns.set(font_scale=1.5)\n","plt.rcParams[\"figure.figsize\"] = (12,6)\n","\n","# Plot the learning curve.\n","plt.plot(df_stats['Training Loss'], 'b-o', label=\"Training\")\n","plt.plot(df_stats['Valid. Loss'], 'g-o', label=\"Validation\")\n","\n","# Label the plot.\n","plt.title(\"Training & Validation Loss\")\n","plt.xlabel(\"Epoch\")\n","plt.ylabel(\"Loss\")\n","plt.legend()\n","# plt.xticks([1, 2, 3, 4])\n","plt.xticks([i for i in range(1, epochs수+1)])\n","\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5fWUafz0p6s7","colab":{"base_uri":"https://localhost:8080/","height":881},"cellView":"form","outputId":"dd296af2-f36a-41b3-c366-5e03cc0b0271","executionInfo":{"status":"ok","timestamp":1690959109011,"user_tz":-540,"elapsed":26565,"user":{"displayName":"지해인","userId":"10118119697182884789"}}},"source":["#@title 딥러닝 학습 평가하기\n","\n","라벨링 = ['bosu','jinbo']  #@param\n","\n","\n","# import\n","import time\n","\n","#시작 시간 설정\n","t0 = time.time()\n","\n","# 평가모드로 변경\n","model.eval()\n","\n","\n","# Tracking variables\n","predictions , true_labels, predictionsfin = [], [], []\n","\n","# 변수 초기화\n","eval_loss, eval_accuracy = 0, 0\n","nb_eval_steps, nb_eval_examples = 0, 0\n","\n","# 데이터로더에서 배치만큼 반복하여 가져옴\n","for step, batch in enumerate(test_dataloader):\n","    # 경과 정보 표시\n","    if step % 100 == 0 and not step == 0:\n","        elapsed = format_time(time.time() - t0)\n","        print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(test_dataloader), elapsed))\n","\n","    # 배치를 GPU에 넣음\n","    batch = tuple(t.to(device) for t in batch)\n","\n","    # 배치에서 데이터 추출\n","    b_input_ids, b_input_mask, b_labels = batch\n","\n","    # 그래디언트 계산 안함\n","    with torch.no_grad():\n","        # Forward 수행\n","        outputs = model(b_input_ids,\n","                        token_type_ids=None,\n","                        attention_mask=b_input_mask)\n","\n","    # 로스 구함\n","    logits = outputs[0]\n","\n","    # CPU로 데이터 이동\n","    logits = logits.detach().cpu().numpy()\n","    label_ids = b_labels.to('cpu').numpy()\n","\n","    # Store predictions and true labels\n","    predictions.append(logits)\n","    true_labels.append(label_ids)\n","\n","    # 출력 로짓과 라벨을 비교하여 정확도 계산\n","    tmp_eval_accuracy = flat_accuracy(logits, label_ids)\n","    eval_accuracy += tmp_eval_accuracy\n","    nb_eval_steps += 1\n","\n","print(\"\")\n","print(\"##### 테스트 모델을 통한 모델 정확도 #####\")\n","print(\"Accuracy: {0:.2f}\".format(eval_accuracy/nb_eval_steps))\n","print(\"Test took: {:}\".format(format_time(time.time() - t0)))\n","\n","\n","## 테스트 데이터를 대상으로 하는 모델 상세 평가\n","## precision = 정밀도 = 실제로는 False이지만 True로 라벨링 한 것에 집중\n","## 실제로는 스팸메일이 아니지만 스펨 메일로 라벨링하면?!\n","## recall = 재현율 = 실제 True인데 False 라벨링한 것에 집중\n","## 실제로는 코로나 감염자이지만, 코로나 감염이 아니라고 하면?!\n","## F1 = 정밀도와 재현율의 조화평균\n","\n","rounded_labels_set = []\n","rounded_predictions_set = []\n","\n","from sklearn.metrics import classification_report\n","\n","# For each input batch...\n","for i in range(len(true_labels)):\n","\n","  # The predictions for this batch are a 2-column ndarray (one column for \"0\"\n","  # and one column for \"1\"). Pick the label with the highest value and turn this\n","  # in to a list of 0s and 1s.\n","  rounded_labels = np.argmax(predictions[i], axis=1).flatten()\n","  rounded_labels_set.extend(rounded_labels)\n","  # Calculate and store the coef for this batch.\n","  rounded_predictions = true_labels[i].flatten()\n","  rounded_predictions_set.extend(rounded_predictions)\n","\n","labels = 라벨링\n","\n","print(\"\")\n","print(classification_report(rounded_labels_set, rounded_predictions_set, target_names=labels))\n","print(\"\")\n","\n","\n","## 혼란 매트릭스 - Confusion matrix\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix\n","\n","\n","# For each input batch...\n","for i in range(len(true_labels)):\n","\n","  # The predictions for this batch are a 2-column ndarray (one column for \"0\"\n","  # and one column for \"1\"). Pick the label with the highest value and turn this\n","  # in to a list of 0s and 1s.\n","  rounded_labels = np.argmax(predictions[i], axis=1).flatten()\n","  rounded_labels_set.extend(rounded_labels)\n","  # Calculate and store the coef for this batch.\n","  rounded_predictions = true_labels[i].flatten()\n","  rounded_predictions_set.extend(rounded_predictions)\n","\n","from sklearn.metrics import confusion_matrix\n","cm = confusion_matrix(rounded_labels_set, rounded_predictions_set)\n","\n","def plot_confusion_matrix(\n","    ax, matrix, labels, title='Confusion matrix', fontsize=9):\n","\n","    ax.set_xticks([x for x in range(len(labels))])\n","    ax.set_yticks([y for y in range(len(labels))])\n","\n","    # Place labels on minor ticks\n","    ax.set_xticks([x + 0.5 for x in range(len(labels))], minor=True)\n","    ax.set_xticklabels(labels, rotation=90, fontsize=fontsize, minor=True)  # rotation must be num not str\n","    ax.set_yticks([y + 0.5 for y in range(len(labels))], minor=True)\n","    ax.set_yticklabels(labels[::-1], fontsize=fontsize, minor=True)\n","\n","    # Hide major tick labels\n","    ax.tick_params(which='major', labelbottom='off', labelleft='off')\n","\n","    # Finally, hide minor tick marks\n","    ax.tick_params(which='minor', width=0)\n","\n","    # Plot heat map\n","    proportions = [1. * row / sum(row) for row in matrix]\n","    ax.pcolor(np.array(proportions[::-1]), cmap=plt.cm.Reds)\n","\n","    # Plot counts as text\n","    for row in range(len(matrix)):\n","        for col in range(len(matrix[row])):\n","            confusion = matrix[::-1][row][col]\n","            if confusion != 0:\n","                ax.text(col + 0.5, row + 0.5, int(confusion),\n","                        fontsize=fontsize,\n","                        horizontalalignment='center',\n","                        verticalalignment='center')\n","\n","    # Add finishing touches\n","    ax.grid(True, linestyle=':')\n","    ax.set_title(title, fontsize=fontsize)\n","    ax.set_xlabel('prediction', fontsize=fontsize)\n","    ax.set_ylabel('actual', fontsize=fontsize)\n","\n","    plt.show()\n","\n","\n","if __name__ == '__main__':\n","    matrix = cm\n","    labels = 라벨링\n","\n","    fig, ax = plt.subplots(figsize=(6, 6))\n","\n","    plot_confusion_matrix(ax, matrix, labels, fontsize=10)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  Batch   100  of    127.    Elapsed: 0:00:20.\n","\n","##### 테스트 모델을 통한 모델 정확도 #####\n","Accuracy: 0.78\n","Test took: 0:00:26\n","\n","              precision    recall  f1-score   support\n","\n","        bosu       0.84      0.82      0.83      5235\n","       jinbo       0.68      0.72      0.70      2882\n","\n","    accuracy                           0.78      8117\n","   macro avg       0.76      0.77      0.76      8117\n","weighted avg       0.78      0.78      0.78      8117\n","\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"486mAnBJqGaV"},"source":["## 예측 모델 실전 테스트#"]},{"cell_type":"code","metadata":{"id":"I7fKoce5qD1I","colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","outputId":"c15c9a12-21e3-40ee-cb21-a6a5cfecb677","executionInfo":{"status":"ok","timestamp":1690959109012,"user_tz":-540,"elapsed":23,"user":{"displayName":"지해인","userId":"10118119697182884789"}}},"source":["#@title 딥러닝 모델로 예측하기\n","\n","\n","테스트용텍스트 = '\\u5C39\\uC774 \\uC5F4\\uCC3D\\uD55C \\uB178\\uB798, \\uBC14\\uC774\\uB4E0\\uC774 \\uC8FD\\uC740 \\uC7A5\\uB0A8\\uACFC \\uC990\\uACA8 \\uBD88\\uB800\\uB358 \\uACE1\\uC774\\uC5C8\\uB2E4'  #@param {type: \"string\"}\n","\n","# 입력 데이터 변환\n","def convert_input_data(sentences):\n","\n","    # BERT의 토크나이저로 문장을 토큰으로 분리\n","    tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]\n","\n","    # 입력 토큰의 최대 시퀀스 길이\n","    MAX_LEN = 128\n","\n","    # 토큰을 숫자 인덱스로 변환\n","    input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]\n","\n","    # 문장을 MAX_LEN 길이에 맞게 자르고, 모자란 부분을 패딩 0으로 채움\n","    input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype=\"long\", truncating=\"post\", padding=\"post\")\n","\n","    # 어텐션 마스크 초기화\n","    attention_masks = []\n","\n","    # 어텐션 마스크를 패딩이 아니면 1, 패딩이면 0으로 설정\n","    # 패딩 부분은 BERT 모델에서 어텐션을 수행하지 않아 속도 향상\n","    for seq in input_ids:\n","        seq_mask = [float(i>0) for i in seq]\n","        attention_masks.append(seq_mask)\n","\n","    # 데이터를 파이토치의 텐서로 변환\n","    inputs = torch.tensor(input_ids)\n","    masks = torch.tensor(attention_masks)\n","\n","    return inputs, masks\n","\n","# 문장 테스트\n","def test_sentences(sentences):\n","\n","    # 평가모드로 변경\n","    model.eval()\n","\n","    # 문장을 입력 데이터로 변환\n","    inputs, masks = convert_input_data(sentences)\n","\n","    # 데이터를 GPU에 넣음\n","    b_input_ids = inputs.to(device)\n","    b_input_mask = masks.to(device)\n","\n","    # 그래디언트 계산 안함\n","    with torch.no_grad():\n","        # Forward 수행\n","        outputs = model(b_input_ids,\n","                        token_type_ids=None,\n","                        attention_mask=b_input_mask)\n","\n","    # 로스 구함\n","    logits = outputs[0]\n","\n","    # CPU로 데이터 이동\n","    logits = logits.detach().cpu().numpy()\n","\n","    return logits\n","\n","logits = test_sentences([테스트용텍스트])\n","\n","print(logits)\n","print(np.argmax(logits))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 2.3737793 -2.0936546]]\n","0\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","outputId":"44e05921-9d2b-4a25-ca62-106d41a0d9e5","id":"-5ct2uxyx9zS","executionInfo":{"status":"ok","timestamp":1690959109012,"user_tz":-540,"elapsed":19,"user":{"displayName":"지해인","userId":"10118119697182884789"}}},"source":["#@title 딥러닝 모델로 예측하기\n","\n","\n","테스트용텍스트 = '\\uBBF8\\uAD6D \\uAE30\\uC790 \\u201C\\uB3C4\\uCCAD \\uC7AC\\uBC1C\\uBC29\\uC9C0 \\uC57D\\uC18D \\uBC1B\\uC558\\uB098?\\u201D \\uC724 \\u201C\\uC2DC\\uAC04\\uC744 \\uB450\\uACE0\\u2026\\u201D'  #@param {type: \"string\"}\n","\n","# 입력 데이터 변환\n","def convert_input_data(sentences):\n","\n","    # BERT의 토크나이저로 문장을 토큰으로 분리\n","    tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]\n","\n","    # 입력 토큰의 최대 시퀀스 길이\n","    MAX_LEN = 128\n","\n","    # 토큰을 숫자 인덱스로 변환\n","    input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]\n","\n","    # 문장을 MAX_LEN 길이에 맞게 자르고, 모자란 부분을 패딩 0으로 채움\n","    input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype=\"long\", truncating=\"post\", padding=\"post\")\n","\n","    # 어텐션 마스크 초기화\n","    attention_masks = []\n","\n","    # 어텐션 마스크를 패딩이 아니면 1, 패딩이면 0으로 설정\n","    # 패딩 부분은 BERT 모델에서 어텐션을 수행하지 않아 속도 향상\n","    for seq in input_ids:\n","        seq_mask = [float(i>0) for i in seq]\n","        attention_masks.append(seq_mask)\n","\n","    # 데이터를 파이토치의 텐서로 변환\n","    inputs = torch.tensor(input_ids)\n","    masks = torch.tensor(attention_masks)\n","\n","    return inputs, masks\n","\n","# 문장 테스트\n","def test_sentences(sentences):\n","\n","    # 평가모드로 변경\n","    model.eval()\n","\n","    # 문장을 입력 데이터로 변환\n","    inputs, masks = convert_input_data(sentences)\n","\n","    # 데이터를 GPU에 넣음\n","    b_input_ids = inputs.to(device)\n","    b_input_mask = masks.to(device)\n","\n","    # 그래디언트 계산 안함\n","    with torch.no_grad():\n","        # Forward 수행\n","        outputs = model(b_input_ids,\n","                        token_type_ids=None,\n","                        attention_mask=b_input_mask)\n","\n","    # 로스 구함\n","    logits = outputs[0]\n","\n","    # CPU로 데이터 이동\n","    logits = logits.detach().cpu().numpy()\n","\n","    return logits\n","\n","logits = test_sentences([테스트용텍스트])\n","\n","print(logits)\n","print(np.argmax(logits))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[-2.2595198  1.8148196]]\n","1\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"Nrw22pQgdFaf","outputId":"1ec97a59-6f65-42a3-ffb1-eaaccf8c205e","executionInfo":{"status":"ok","timestamp":1690959109012,"user_tz":-540,"elapsed":17,"user":{"displayName":"지해인","userId":"10118119697182884789"}}},"source":["#@title 딥러닝 모델로 예측하기\n","\n","\n","테스트용텍스트 = '\\uC6CC\\uC2F1\\uD134 \\uC120\\uC5B8 \\uB098\\uC628 \\uB0A0... \\u6587 \\u201C\\uD310\\uBB38\\uC810 \\uC120\\uC5B8\\uC740 \\uD3C9\\uD654 \\uC774\\uC815\\uD45C, \\uD55C\\uBC18\\uB3C4\\uC815\\uC138 \\uC545\\uD654\\u201D'  #@param {type: \"string\"}\n","\n","# 입력 데이터 변환\n","def convert_input_data(sentences):\n","\n","    # BERT의 토크나이저로 문장을 토큰으로 분리\n","    tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]\n","\n","    # 입력 토큰의 최대 시퀀스 길이\n","    MAX_LEN = 128\n","\n","    # 토큰을 숫자 인덱스로 변환\n","    input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]\n","\n","    # 문장을 MAX_LEN 길이에 맞게 자르고, 모자란 부분을 패딩 0으로 채움\n","    input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype=\"long\", truncating=\"post\", padding=\"post\")\n","\n","    # 어텐션 마스크 초기화\n","    attention_masks = []\n","\n","    # 어텐션 마스크를 패딩이 아니면 1, 패딩이면 0으로 설정\n","    # 패딩 부분은 BERT 모델에서 어텐션을 수행하지 않아 속도 향상\n","    for seq in input_ids:\n","        seq_mask = [float(i>0) for i in seq]\n","        attention_masks.append(seq_mask)\n","\n","    # 데이터를 파이토치의 텐서로 변환\n","    inputs = torch.tensor(input_ids)\n","    masks = torch.tensor(attention_masks)\n","\n","    return inputs, masks\n","\n","# 문장 테스트\n","def test_sentences(sentences):\n","\n","    # 평가모드로 변경\n","    model.eval()\n","\n","    # 문장을 입력 데이터로 변환\n","    inputs, masks = convert_input_data(sentences)\n","\n","    # 데이터를 GPU에 넣음\n","    b_input_ids = inputs.to(device)\n","    b_input_mask = masks.to(device)\n","\n","    # 그래디언트 계산 안함\n","    with torch.no_grad():\n","        # Forward 수행\n","        outputs = model(b_input_ids,\n","                        token_type_ids=None,\n","                        attention_mask=b_input_mask)\n","\n","    # 로스 구함\n","    logits = outputs[0]\n","\n","    # CPU로 데이터 이동\n","    logits = logits.detach().cpu().numpy()\n","\n","    return logits\n","\n","logits = test_sentences([테스트용텍스트])\n","\n","print(logits)\n","print(np.argmax(logits))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.6921252  -0.73301876]]\n","0\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"SBmtihnPwIyb","outputId":"56fae0c6-fed1-4a51-fac8-193a0c38c13c","executionInfo":{"status":"ok","timestamp":1690959109013,"user_tz":-540,"elapsed":16,"user":{"displayName":"지해인","userId":"10118119697182884789"}}},"source":["#@title 딥러닝 모델로 예측하기\n","\n","\n","테스트용텍스트 = '\\uAC04\\uD638\\uBC95 \\uAD6D\\uD68C \\uD1B5\\uACFC\\u2026\\uAD6D\\uD798\\uC740 \\u2018\\uAC04\\uD638\\uC0AC \\uCD9C\\uC2E0\\u2019 \\uCD5C\\uC5F0\\uC219\\uB9CC \\uCC2C\\uC131'  #@param {type: \"string\"}\n","\n","# 입력 데이터 변환\n","def convert_input_data(sentences):\n","\n","    # BERT의 토크나이저로 문장을 토큰으로 분리\n","    tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]\n","\n","    # 입력 토큰의 최대 시퀀스 길이\n","    MAX_LEN = 128\n","\n","    # 토큰을 숫자 인덱스로 변환\n","    input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]\n","\n","    # 문장을 MAX_LEN 길이에 맞게 자르고, 모자란 부분을 패딩 0으로 채움\n","    input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype=\"long\", truncating=\"post\", padding=\"post\")\n","\n","    # 어텐션 마스크 초기화\n","    attention_masks = []\n","\n","    # 어텐션 마스크를 패딩이 아니면 1, 패딩이면 0으로 설정\n","    # 패딩 부분은 BERT 모델에서 어텐션을 수행하지 않아 속도 향상\n","    for seq in input_ids:\n","        seq_mask = [float(i>0) for i in seq]\n","        attention_masks.append(seq_mask)\n","\n","    # 데이터를 파이토치의 텐서로 변환\n","    inputs = torch.tensor(input_ids)\n","    masks = torch.tensor(attention_masks)\n","\n","    return inputs, masks\n","\n","# 문장 테스트\n","def test_sentences(sentences):\n","\n","    # 평가모드로 변경\n","    model.eval()\n","\n","    # 문장을 입력 데이터로 변환\n","    inputs, masks = convert_input_data(sentences)\n","\n","    # 데이터를 GPU에 넣음\n","    b_input_ids = inputs.to(device)\n","    b_input_mask = masks.to(device)\n","\n","    # 그래디언트 계산 안함\n","    with torch.no_grad():\n","        # Forward 수행\n","        outputs = model(b_input_ids,\n","                        token_type_ids=None,\n","                        attention_mask=b_input_mask)\n","\n","    # 로스 구함\n","    logits = outputs[0]\n","\n","    # CPU로 데이터 이동\n","    logits = logits.detach().cpu().numpy()\n","\n","    return logits\n","\n","logits = test_sentences([테스트용텍스트])\n","\n","print(logits)\n","print(np.argmax(logits))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[-0.2462739   0.12010659]]\n","1\n"]}]},{"cell_type":"markdown","metadata":{"id":"BFp8z2KH5THp"},"source":["## 딥러닝 모델의 저장 & 불러오기"]},{"cell_type":"code","metadata":{"id":"clG08PlBNb2t","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d9922234-3a16-423c-b159-3a32ad52868b","executionInfo":{"status":"ok","timestamp":1690959150617,"user_tz":-540,"elapsed":33419,"user":{"displayName":"지해인","userId":"10118119697182884789"}}},"source":["#@title 딥러닝 모델 저장하기\n","\n","model.save_pretrained('.')\n","\n","## 딥러닝 모델 저장하기\n","from google.colab import drive\n","drive.mount(\"/content/drive\", force_remount=True)\n","\n","!cp \"/content/pytorch_model.bin\" -r \"/content/drive/MyDrive\"\n","!cp \"/content/config.json\" -r \"/content/drive/MyDrive\"\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"Z-kVsanpCY4v"},"source":["### 딥러닝 모델 불러오기"]},{"cell_type":"code","source":["#@title 데이터 불러오기 - 모델 불러오기\n","\n","# 문서 ID로 실제 파일 불러오는 법\n","# pytorch_model.bin 링크 기입\n","## https://drive.google.com/file/d/1WlA1H9zlXyYFqrW0Yt1MsYKhCoW1ss8t/\n","파일ID = '1WlA1H9zlXyYFqrW0Yt1MsYKhCoW1ss8t'\n","파일저장이름 = 'pytorch_model.bin'\n","\n","!wget --load-cookies ~/cookies.txt \"https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies ~/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id={파일ID}' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\\1\\n/p')&id={파일ID}\" -O {파일저장이름} && rm -rf ~/cookies.txt\n","\n","\n","# config.json 링크 기입\n","## https://drive.google.com/file/d/1tus80Qm7dUDK-Mut_kEknxFCYZTWmCMy/\n","파일ID = '1tus80Qm7dUDK-Mut_kEknxFCYZTWmCMy'\n","파일저장이름 = 'config.json'\n","\n","!wget --load-cookies ~/cookies.txt \"https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies ~/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id={파일ID}' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\\1\\n/p')&id={파일ID}\" -O {파일저장이름} && rm -rf ~/cookies.txt\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wBczDDx9QfcZ","executionInfo":{"status":"ok","timestamp":1690959448946,"user_tz":-540,"elapsed":6912,"user":{"displayName":"지해인","userId":"10118119697182884789"}},"outputId":"16e2de5e-cedc-49c0-b571-ce315d319c05","collapsed":true},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2023-08-02 06:57:21--  https://docs.google.com/uc?export=download&confirm=t&id=1WlA1H9zlXyYFqrW0Yt1MsYKhCoW1ss8t\n","Resolving docs.google.com (docs.google.com)... 108.177.126.113, 108.177.126.102, 108.177.126.138, ...\n","Connecting to docs.google.com (docs.google.com)|108.177.126.113|:443... connected.\n","HTTP request sent, awaiting response... 303 See Other\n","Location: https://doc-0g-50-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/s44ghm0jh838e59khiig5encjucgv1q2/1690959375000/10118119697182884789/*/1WlA1H9zlXyYFqrW0Yt1MsYKhCoW1ss8t?e=download&uuid=d118a864-832b-4df8-ba57-46a1fbf92280 [following]\n","Warning: wildcards not supported in HTTP.\n","--2023-08-02 06:57:21--  https://doc-0g-50-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/s44ghm0jh838e59khiig5encjucgv1q2/1690959375000/10118119697182884789/*/1WlA1H9zlXyYFqrW0Yt1MsYKhCoW1ss8t?e=download&uuid=d118a864-832b-4df8-ba57-46a1fbf92280\n","Resolving doc-0g-50-docs.googleusercontent.com (doc-0g-50-docs.googleusercontent.com)... 108.177.119.132, 2a00:1450:4013:c00::84\n","Connecting to doc-0g-50-docs.googleusercontent.com (doc-0g-50-docs.googleusercontent.com)|108.177.119.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 711488305 (679M) [application/x-zip]\n","Saving to: ‘pytorch_model.bin’\n","\n","pytorch_model.bin   100%[===================>] 678.53M   131MB/s    in 4.5s    \n","\n","2023-08-02 06:57:26 (151 MB/s) - ‘pytorch_model.bin’ saved [711488305/711488305]\n","\n","--2023-08-02 06:57:27--  https://docs.google.com/uc?export=download&confirm=&id=1tus80Qm7dUDK-Mut_kEknxFCYZTWmCMy\n","Resolving docs.google.com (docs.google.com)... 108.177.126.113, 108.177.126.102, 108.177.126.138, ...\n","Connecting to docs.google.com (docs.google.com)|108.177.126.113|:443... connected.\n","HTTP request sent, awaiting response... 303 See Other\n","Location: https://doc-10-50-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/5ts0euefm1bilk6tprrne7gbhposds3a/1690959375000/10118119697182884789/*/1tus80Qm7dUDK-Mut_kEknxFCYZTWmCMy?e=download&uuid=a3d74bb3-3434-4654-a979-ab43d4f0286c [following]\n","Warning: wildcards not supported in HTTP.\n","--2023-08-02 06:57:27--  https://doc-10-50-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/5ts0euefm1bilk6tprrne7gbhposds3a/1690959375000/10118119697182884789/*/1tus80Qm7dUDK-Mut_kEknxFCYZTWmCMy?e=download&uuid=a3d74bb3-3434-4654-a979-ab43d4f0286c\n","Resolving doc-10-50-docs.googleusercontent.com (doc-10-50-docs.googleusercontent.com)... 108.177.119.132, 2a00:1450:4013:c00::84\n","Connecting to doc-10-50-docs.googleusercontent.com (doc-10-50-docs.googleusercontent.com)|108.177.119.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 895 [application/json]\n","Saving to: ‘config.json’\n","\n","config.json         100%[===================>]     895  --.-KB/s    in 0s      \n","\n","2023-08-02 06:57:27 (42.8 MB/s) - ‘config.json’ saved [895/895]\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rGSfS8RLt0KH","outputId":"0535926b-9925-47fe-f965-bc46c6a0cafd","executionInfo":{"status":"ok","timestamp":1690959497874,"user_tz":-540,"elapsed":45351,"user":{"displayName":"지해인","userId":"10118119697182884789"}}},"source":["#@title 불러온 모델을 위한 환경 세팅\n","\n","bert모델 = \"bert-base-multilingual-cased\"  #@param ['bert-base-multilingual-cased', 'bert-large-cased', 'bert-base-chinese']\n","\n","\n","# Hugging Face의 트랜스포머 모델을 설치\n","!pip install transformers\n","\n","import sys\n","\n","from IPython.display import clear_output\n","clear_output(wait=True)\n","\n","import tensorflow as tf\n","import torch\n","from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n","\n","from transformers import BertTokenizer\n","from transformers import BertForSequenceClassification, AdamW, BertConfig\n","# from keras.preprocessing.sequence import pad_sequences  # path removed\n","from keras.utils import pad_sequences\n","import numpy as np\n","\n","\n","## 해당 부분에서 에러가 나면, \"런타임 > 런타임 유형 변경 > 하드웨어 가속시 > GPU\"로 변경해야 합니다.\n","\n","# GPU 디바이스 이름 구함\n","device_name = tf.test.gpu_device_name()\n","\n","# GPU 디바이스 이름 검사\n","if device_name == '/device:GPU:0':\n","    print('Found GPU at: {}'.format(device_name))\n","else:\n","    raise SystemError('GPU device not found')\n","\n","# 디바이스 설정\n","if torch.cuda.is_available():\n","    device = torch.device(\"cuda\")\n","    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n","    print('We will use the GPU:', torch.cuda.get_device_name(0))\n","else:\n","    device = torch.device(\"cpu\")\n","    print('No GPU available, using the CPU instead.')\n","\n","\n","tokenizer = BertTokenizer.from_pretrained(bert모델, do_lower_case=False)\n","\n","#model_fn = 'pytorch_model.bin'\n","#bert_model = 'bert-base-multilingual-cased'\n","#model_state_dict = torch.load(model_fn)\n","#model = BertForSequenceClassification.from_pretrained(bert_model, state_dict = model_state_dict, num_labels = 2)\n","#model.bert.load_state_dict(model.bert.state_dict())\n","\n","model = BertForSequenceClassification.from_pretrained(\".\", num_labels=2)\n","model.cuda()\n","\n","\n","clear_output()\n","\n","print('환경 설정이 완료되었습니다.')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["환경 설정이 완료되었습니다.\n"]}]},{"cell_type":"code","metadata":{"id":"5r0FESMaRgYM","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f2de6567-3343-40ec-c714-315f5a7d1988","executionInfo":{"status":"ok","timestamp":1690959498817,"user_tz":-540,"elapsed":945,"user":{"displayName":"지해인","userId":"10118119697182884789"}}},"source":["#@title 딥러닝 모델로 예측하기\n","\n","\n","테스트용텍스트 = '\\u5C39\\uC774 \\uC5F4\\uCC3D\\uD55C \\uB178\\uB798, \\uBC14\\uC774\\uB4E0\\uC774 \\uC8FD\\uC740 \\uC7A5\\uB0A8\\uACFC \\uC990\\uACA8 \\uBD88\\uB800\\uB358 \\uACE1\\uC774\\uC5C8\\uB2E4'  #@param {type: \"string\"}\n","\n","\n","# 입력 데이터 변환\n","def convert_input_data(sentences):\n","\n","    # BERT의 토크나이저로 문장을 토큰으로 분리\n","    tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]\n","\n","    # 입력 토큰의 최대 시퀀스 길이\n","    MAX_LEN = 128\n","\n","    # 토큰을 숫자 인덱스로 변환\n","    input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]\n","\n","    # 문장을 MAX_LEN 길이에 맞게 자르고, 모자란 부분을 패딩 0으로 채움\n","    input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype=\"long\", truncating=\"post\", padding=\"post\")\n","\n","    # 어텐션 마스크 초기화\n","    attention_masks = []\n","\n","    # 어텐션 마스크를 패딩이 아니면 1, 패딩이면 0으로 설정\n","    # 패딩 부분은 BERT 모델에서 어텐션을 수행하지 않아 속도 향상\n","    for seq in input_ids:\n","        seq_mask = [float(i>0) for i in seq]\n","        attention_masks.append(seq_mask)\n","\n","    # 데이터를 파이토치의 텐서로 변환\n","    inputs = torch.tensor(input_ids)\n","    masks = torch.tensor(attention_masks)\n","\n","    return inputs, masks\n","\n","\n","# 문장 테스트\n","def test_sentences(sentences):\n","\n","    # 평가모드로 변경\n","    model.eval()\n","\n","    # 문장을 입력 데이터로 변환\n","    inputs, masks = convert_input_data(sentences)\n","\n","    # 데이터를 GPU에 넣음\n","    b_input_ids = inputs.to(device)\n","    b_input_mask = masks.to(device)\n","\n","    # 그래디언트 계산 안함\n","    with torch.no_grad():\n","        # Forward 수행\n","        outputs = model(b_input_ids,\n","                        token_type_ids=None,\n","                        attention_mask=b_input_mask)\n","\n","    # 로스 구함\n","    logits = outputs[0]\n","\n","    # CPU로 데이터 이동\n","    logits = logits.detach().cpu().numpy()\n","\n","    return logits\n","\n","\n","logits = test_sentences([테스트용텍스트])\n","\n","print(logits)\n","print(np.argmax(logits))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 2.3737793 -2.0936546]]\n","0\n"]}]},{"cell_type":"code","metadata":{"cellView":"form","colab":{"base_uri":"https://localhost:8080/"},"id":"an-PJ7pjeo4z","outputId":"5a75df12-0b01-4ea3-bcb3-b88d78ea96c4","executionInfo":{"status":"ok","timestamp":1690959498817,"user_tz":-540,"elapsed":4,"user":{"displayName":"지해인","userId":"10118119697182884789"}}},"source":["#@title 딥러닝 모델로 예측하기\n","\n","\n","테스트용텍스트 = '\\uAC04\\uD638\\uBC95 \\uAD6D\\uD68C \\uD1B5\\uACFC\\u2026\\uAD6D\\uD798\\uC740 \\u2018\\uAC04\\uD638\\uC0AC \\uCD9C\\uC2E0\\u2019 \\uCD5C\\uC5F0\\uC219\\uB9CC \\uCC2C\\uC131'  #@param {type: \"string\"}\n","\n","\n","# 입력 데이터 변환\n","def convert_input_data(sentences):\n","\n","    # BERT의 토크나이저로 문장을 토큰으로 분리\n","    tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]\n","\n","    # 입력 토큰의 최대 시퀀스 길이\n","    MAX_LEN = 128\n","\n","    # 토큰을 숫자 인덱스로 변환\n","    input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]\n","\n","    # 문장을 MAX_LEN 길이에 맞게 자르고, 모자란 부분을 패딩 0으로 채움\n","    input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype=\"long\", truncating=\"post\", padding=\"post\")\n","\n","    # 어텐션 마스크 초기화\n","    attention_masks = []\n","\n","    # 어텐션 마스크를 패딩이 아니면 1, 패딩이면 0으로 설정\n","    # 패딩 부분은 BERT 모델에서 어텐션을 수행하지 않아 속도 향상\n","    for seq in input_ids:\n","        seq_mask = [float(i>0) for i in seq]\n","        attention_masks.append(seq_mask)\n","\n","    # 데이터를 파이토치의 텐서로 변환\n","    inputs = torch.tensor(input_ids)\n","    masks = torch.tensor(attention_masks)\n","\n","    return inputs, masks\n","\n","\n","# 문장 테스트\n","def test_sentences(sentences):\n","\n","    # 평가모드로 변경\n","    model.eval()\n","\n","    # 문장을 입력 데이터로 변환\n","    inputs, masks = convert_input_data(sentences)\n","\n","    # 데이터를 GPU에 넣음\n","    b_input_ids = inputs.to(device)\n","    b_input_mask = masks.to(device)\n","\n","    # 그래디언트 계산 안함\n","    with torch.no_grad():\n","        # Forward 수행\n","        outputs = model(b_input_ids,\n","                        token_type_ids=None,\n","                        attention_mask=b_input_mask)\n","\n","    # 로스 구함\n","    logits = outputs[0]\n","\n","    # CPU로 데이터 이동\n","    logits = logits.detach().cpu().numpy()\n","\n","    return logits\n","\n","\n","logits = test_sentences([테스트용텍스트])\n","\n","print(logits)\n","print(np.argmax(logits))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[-0.2462739   0.12010659]]\n","1\n"]}]},{"cell_type":"markdown","source":["## 심화 학습 : 테스트용 데이터 대량 입력하기"],"metadata":{"id":"GqaLKJUb9vRL"}},{"cell_type":"code","source":["#@title 데이터 불러오기 - 테스트 데이터\n","파일ID = '1DKKis8ChPNDpouzhdye24iQsAr0aBX4F'  #@param {type: \"string\"}\n","파일저장이름 = 'rawdata2.tsv'  #@param {type: \"string\"}\n","\n","# 문서 ID로 실제 파일 불러오는 법\n","## 조중동한경_정치만_각각_20161101-20161231 : https://drive.google.com/file/d/1DKKis8ChPNDpouzhdye24iQsAr0aBX4F/\n","\n","!wget --load-cookies ~/cookies.txt \"https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies ~/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id={파일ID}' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\\1\\n/p')&id={파일ID}\" -O {파일저장이름} && rm -rf ~/cookies.txt\n","\n","print(파일저장이름+\"을 정상적으로 가져왔습니다.\")\n","\n","# pandas import\n","import pandas as pd\n","\n","# 파일을 DataFrame으로 전환\n","df2 = pd.read_csv(파일저장이름, sep='\\t')\n","df2 = df2.dropna(axis=0)\n","df2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":760},"id":"lVpbkjaS9wgY","executionInfo":{"status":"ok","timestamp":1690959509169,"user_tz":-540,"elapsed":2609,"user":{"displayName":"지해인","userId":"10118119697182884789"}},"outputId":"f15526fb-6c0b-4be3-94d4-a41a408957d2","cellView":"form"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2023-08-02 06:58:26--  https://docs.google.com/uc?export=download&confirm=&id=1DKKis8ChPNDpouzhdye24iQsAr0aBX4F\n","Resolving docs.google.com (docs.google.com)... 173.194.79.113, 173.194.79.100, 173.194.79.101, ...\n","Connecting to docs.google.com (docs.google.com)|173.194.79.113|:443... connected.\n","HTTP request sent, awaiting response... 303 See Other\n","Location: https://doc-0o-50-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/kuljehq2jfhln16qk2pe0t3prsadp73h/1690959450000/10118119697182884789/*/1DKKis8ChPNDpouzhdye24iQsAr0aBX4F?e=download&uuid=7b9b7154-c990-46af-9ab6-90991ba1c6e5 [following]\n","Warning: wildcards not supported in HTTP.\n","--2023-08-02 06:58:27--  https://doc-0o-50-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/kuljehq2jfhln16qk2pe0t3prsadp73h/1690959450000/10118119697182884789/*/1DKKis8ChPNDpouzhdye24iQsAr0aBX4F?e=download&uuid=7b9b7154-c990-46af-9ab6-90991ba1c6e5\n","Resolving doc-0o-50-docs.googleusercontent.com (doc-0o-50-docs.googleusercontent.com)... 108.177.119.132, 2a00:1450:4013:c00::84\n","Connecting to doc-0o-50-docs.googleusercontent.com (doc-0o-50-docs.googleusercontent.com)|108.177.119.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 1294443 (1.2M) [text/csv]\n","Saving to: ‘rawdata2.tsv’\n","\n","rawdata2.tsv        100%[===================>]   1.23M  --.-KB/s    in 0.008s  \n","\n","2023-08-02 06:58:27 (146 MB/s) - ‘rawdata2.tsv’ saved [1294443/1294443]\n","\n","rawdata2.tsv을 정상적으로 가져왔습니다.\n"]},{"output_type":"execute_result","data":{"text/plain":["      label                                            text\n","0      경향신문                             [경향포토]새해 촛불 밝히는 어린이\n","1      경향신문                                      [경향포토]송박영신\n","2      경향신문                                   [경향포토]송박영신 축포\n","3      경향신문                                 [경향포토]정경유착 퍼포먼스\n","4      경향신문                         [경향포토]송박영신 세월호 진실을 인양하라\n","...     ...                                             ...\n","14966  중앙일보                                    [인사] 기획재정부 外\n","14967  중앙일보                    [취재일기] 이상돈도 안 최순실, 친박은 몰랐다고?\n","14968  중앙일보  평화 오디세이 2016 참가자 릴레이 기고 <12> 러시아에서 한반도 평화를 꿈꾸다\n","14969  중앙일보                   [글로벌 아이] 최순실 사태, 국가 시스템을 수술하라\n","14970  중앙일보                     [인사] SPC그룹 임원 인사 허희수 신임 부사장\n","\n","[14971 rows x 2 columns]"],"text/html":["\n","\n","  <div id=\"df-339f29db-e829-4019-8faf-1380b1fbb1a7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>경향신문</td>\n","      <td>[경향포토]새해 촛불 밝히는 어린이</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>경향신문</td>\n","      <td>[경향포토]송박영신</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>경향신문</td>\n","      <td>[경향포토]송박영신 축포</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>경향신문</td>\n","      <td>[경향포토]정경유착 퍼포먼스</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>경향신문</td>\n","      <td>[경향포토]송박영신 세월호 진실을 인양하라</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>14966</th>\n","      <td>중앙일보</td>\n","      <td>[인사] 기획재정부 外</td>\n","    </tr>\n","    <tr>\n","      <th>14967</th>\n","      <td>중앙일보</td>\n","      <td>[취재일기] 이상돈도 안 최순실, 친박은 몰랐다고?</td>\n","    </tr>\n","    <tr>\n","      <th>14968</th>\n","      <td>중앙일보</td>\n","      <td>평화 오디세이 2016 참가자 릴레이 기고 &lt;12&gt; 러시아에서 한반도 평화를 꿈꾸다</td>\n","    </tr>\n","    <tr>\n","      <th>14969</th>\n","      <td>중앙일보</td>\n","      <td>[글로벌 아이] 최순실 사태, 국가 시스템을 수술하라</td>\n","    </tr>\n","    <tr>\n","      <th>14970</th>\n","      <td>중앙일보</td>\n","      <td>[인사] SPC그룹 임원 인사 허희수 신임 부사장</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>14971 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-339f29db-e829-4019-8faf-1380b1fbb1a7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-d8e09731-5a33-4f25-84cb-d1cf2d02eee2\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d8e09731-5a33-4f25-84cb-d1cf2d02eee2')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-d8e09731-5a33-4f25-84cb-d1cf2d02eee2 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-339f29db-e829-4019-8faf-1380b1fbb1a7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-339f29db-e829-4019-8faf-1380b1fbb1a7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["#@title 데이터 선택하기\n","\n","데이터량 = \"14971\"  #@param ['100', '1000', '5000', '10000', '14971']\n","데이터량 = int(데이터량)\n","\n","df2 = df2.iloc[:데이터량]\n","print(df2)\n","\n","print(df2[\"label\"].groupby([df2[\"label\"]]).count())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"cellView":"form","id":"9-0dIAVh-pIK","executionInfo":{"status":"ok","timestamp":1690959512872,"user_tz":-540,"elapsed":573,"user":{"displayName":"지해인","userId":"10118119697182884789"}},"outputId":"3c689893-7040-4258-9b29-40dee1121eb2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["      label                                            text\n","0      경향신문                             [경향포토]새해 촛불 밝히는 어린이\n","1      경향신문                                      [경향포토]송박영신\n","2      경향신문                                   [경향포토]송박영신 축포\n","3      경향신문                                 [경향포토]정경유착 퍼포먼스\n","4      경향신문                         [경향포토]송박영신 세월호 진실을 인양하라\n","...     ...                                             ...\n","14966  중앙일보                                    [인사] 기획재정부 外\n","14967  중앙일보                    [취재일기] 이상돈도 안 최순실, 친박은 몰랐다고?\n","14968  중앙일보  평화 오디세이 2016 참가자 릴레이 기고 <12> 러시아에서 한반도 평화를 꿈꾸다\n","14969  중앙일보                   [글로벌 아이] 최순실 사태, 국가 시스템을 수술하라\n","14970  중앙일보                     [인사] SPC그룹 임원 인사 허희수 신임 부사장\n","\n","[14971 rows x 2 columns]\n","label\n","경향신문    5742\n","동아일보    1951\n","중앙일보    4584\n","한겨레     2694\n","Name: label, dtype: int64\n"]}]},{"cell_type":"code","source":["## 텍스트로 되어 있는 라벨을 숫자로 변환\n","df2.loc[df2.label=='조선일보', 'label']='0'\n","df2.loc[df2.label=='중앙일보', 'label']='0'\n","df2.loc[df2.label=='동아일보', 'label']='0'\n","df2.loc[df2.label=='한겨레', 'label']='1'\n","df2.loc[df2.label=='경향신문', 'label']='1'\n","\n","## label 값을 숫자로 전환\n","df2['label'] = df2['label'].apply(pd.to_numeric)\n","\n","print(df2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i1CXugik-p1I","executionInfo":{"status":"ok","timestamp":1690959516935,"user_tz":-540,"elapsed":1645,"user":{"displayName":"지해인","userId":"10118119697182884789"}},"outputId":"fbac9510-ae67-4481-d04c-fccfbe2f0e87"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       label                                            text\n","0          1                             [경향포토]새해 촛불 밝히는 어린이\n","1          1                                      [경향포토]송박영신\n","2          1                                   [경향포토]송박영신 축포\n","3          1                                 [경향포토]정경유착 퍼포먼스\n","4          1                         [경향포토]송박영신 세월호 진실을 인양하라\n","...      ...                                             ...\n","14966      0                                    [인사] 기획재정부 外\n","14967      0                    [취재일기] 이상돈도 안 최순실, 친박은 몰랐다고?\n","14968      0  평화 오디세이 2016 참가자 릴레이 기고 <12> 러시아에서 한반도 평화를 꿈꾸다\n","14969      0                   [글로벌 아이] 최순실 사태, 국가 시스템을 수술하라\n","14970      0                     [인사] SPC그룹 임원 인사 허희수 신임 부사장\n","\n","[14971 rows x 2 columns]\n"]}]},{"cell_type":"code","source":["#@title 테스트용 데이터 전처리\n","\n","## 전처리를 위한 기본 텍스트 정보를 탐색합니다.\n","\n","최대길이 = \"64\"  #@param ['32', '64', '128', '256']\n","최대길이 = int(최대길이)\n","배치크기 = \"64\"  #@param ['8', '16', '32', '64', '128', '256']\n","배치크기 = int(배치크기)\n","\n","test=df2  # 훈련 데이터만 제외한 데이터가 아닌 새로 가져온 데이터 df2를 테스트 데이터로 설정\n","\n","test.drop_duplicates(subset = ['text'], inplace=True) # text 열에서 중복인 내용이 있다면 중복 제거\n","test['text'] = test['text'].str.replace(\"[^ㄱ-ㅎㅏ-ㅣ가-힣 ]\",\"\") # 정규 표현식 수행\n","test['text'].replace('', np.nan, inplace=True) # 공백은 Null 값으로 변경\n","test = test.dropna(how='any') # Null 값 제거\n","print('전처리 후 테스트용 샘플의 개수 :',len(test))\n","\n","#@title 테스트 데이터 처리(훈련데이터와 동일)\n","\n","# 리뷰 문장 추출\n","sentences = test['text']\n","\n","# BERT의 입력 형식에 맞게 변환\n","sentences = [\"[CLS] \" + str(sentence) + \" [SEP]\" for sentence in sentences]\n","\n","# 라벨 추출\n","labels = test['label'].values\n","\n","# BERT의 토크나이저로 문장을 토큰으로 분리\n","tokenizer = BertTokenizer.from_pretrained(bert모델, do_lower_case=False)\n","tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]\n","\n","# 토큰을 숫자 인덱스로 변환\n","input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]\n","\n","# 문장을 MAX_LEN 길이에 맞게 자르고, 모자란 부분을 패딩 0으로 채움\n","input_ids = pad_sequences(input_ids, maxlen=최대길이, dtype=\"long\", truncating=\"post\", padding=\"post\")\n","\n","# 어텐션 마스크 초기화\n","attention_masks = []\n","\n","# 어텐션 마스크를 패딩이 아니면 1, 패딩이면 0으로 설정\n","# 패딩 부분은 BERT 모델에서 어텐션을 수행하지 않아 속도 향상\n","for seq in input_ids:\n","    seq_mask = [float(i>0) for i in seq]\n","    attention_masks.append(seq_mask)\n","\n","# 데이터를 파이토치의 텐서로 변환\n","test_inputs = torch.tensor(input_ids)\n","test_labels = torch.tensor(labels)\n","test_masks = torch.tensor(attention_masks)\n","\n","# 파이토치의 DataLoader로 입력, 마스크, 라벨을 묶어 데이터 설정\n","# 학습시 배치 사이즈 만큼 데이터를 가져옴\n","test_data = TensorDataset(test_inputs, test_masks, test_labels)\n","test_sampler = RandomSampler(test_data)\n","test_dataloader = DataLoader(test_data, sampler=test_sampler, batch_size=배치크기)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690959525607,"user_tz":-540,"elapsed":8675,"user":{"displayName":"지해인","userId":"10118119697182884789"}},"outputId":"8b80d458-7bbe-4aee-d4aa-9ab960c12a55","id":"oZUS2iyIMVGm","cellView":"form"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-8-2d1456f892d2>:13: FutureWarning: The default value of regex will change from True to False in a future version.\n","  test['text'] = test['text'].str.replace(\"[^ㄱ-ㅎㅏ-ㅣ가-힣 ]\",\"\") # 정규 표현식 수행\n"]},{"output_type":"stream","name":"stdout","text":["전처리 후 테스트용 샘플의 개수 : 14872\n"]}]},{"cell_type":"code","source":["#@title 딥러닝 학습 평가하기\n","\n","라벨링 = ['bosu','jinbo']  #@param\n","\n","import time\n","import datetime\n","\n","#from sklearn.model_selection import train_test_split\n","\n","# 정확도 계산 함수\n","def flat_accuracy(preds, labels):\n","\n","    pred_flat = np.argmax(preds, axis=1).flatten()\n","    labels_flat = labels.flatten()\n","\n","    return np.sum(pred_flat == labels_flat) / len(labels_flat)\n","\n","# 시간 표시 함수\n","def format_time(elapsed):\n","\n","    # 반올림\n","    elapsed_rounded = int(round((elapsed)))\n","\n","    # hh:mm:ss으로 형태 변경\n","    return str(datetime.timedelta(seconds=elapsed_rounded))\n","\n","\n","\n","#시작 시간 설정\n","t0 = time.time()\n","\n","# 평가모드로 변경\n","model.eval()\n","\n","\n","# Tracking variables\n","predictions , true_labels, predictionsfin = [], [], []\n","\n","# 변수 초기화\n","eval_loss, eval_accuracy = 0, 0\n","nb_eval_steps, nb_eval_examples = 0, 0\n","\n","# 데이터로더에서 배치만큼 반복하여 가져옴\n","for step, batch in enumerate(test_dataloader):\n","    # 경과 정보 표시\n","    if step % 100 == 0 and not step == 0:\n","        elapsed = format_time(time.time() - t0)\n","        print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(test_dataloader), elapsed))\n","\n","    # 배치를 GPU에 넣음\n","    batch = tuple(t.to(device) for t in batch)\n","\n","    # 배치에서 데이터 추출\n","    b_input_ids, b_input_mask, b_labels = batch\n","\n","    # 그래디언트 계산 안함\n","    with torch.no_grad():\n","        # Forward 수행\n","        outputs = model(b_input_ids,\n","                        token_type_ids=None,\n","                        attention_mask=b_input_mask)\n","\n","    # 로스 구함\n","    logits = outputs[0]\n","\n","    # CPU로 데이터 이동\n","    logits = logits.detach().cpu().numpy()\n","    label_ids = b_labels.to('cpu').numpy()\n","\n","    # Store predictions and true labels\n","    predictions.append(logits)\n","    true_labels.append(label_ids)\n","\n","    # 출력 로짓과 라벨을 비교하여 정확도 계산\n","    tmp_eval_accuracy = flat_accuracy(logits, label_ids)\n","    eval_accuracy += tmp_eval_accuracy\n","    nb_eval_steps += 1\n","\n","print(\"\")\n","print(\"##### 테스트 모델을 통한 모델 정확도 #####\")\n","print(\"Accuracy: {0:.2f}\".format(eval_accuracy/nb_eval_steps))\n","print(\"Test took: {:}\".format(format_time(time.time() - t0)))\n","\n","\n","## 테스트 데이터를 대상으로 하는 모델 상세 평가\n","## precision = 정밀도 = 실제로는 False이지만 True로 라벨링 한 것에 집중\n","## 실제로는 스팸메일이 아니지만 스펨 메일로 라벨링하면?!\n","## recall = 재현율 = 실제 True인데 False 라벨링한 것에 집중\n","## 실제로는 코로나 감염자이지만, 코로나 감염이 아니라고 하면?!\n","## F1 = 정밀도와 재현율의 조화평균\n","\n","rounded_labels_set = []\n","rounded_predictions_set = []\n","\n","from sklearn.metrics import classification_report\n","\n","# For each input batch...\n","for i in range(len(true_labels)):\n","\n","  # The predictions for this batch are a 2-column ndarray (one column for \"0\"\n","  # and one column for \"1\"). Pick the label with the highest value and turn this\n","  # in to a list of 0s and 1s.\n","  rounded_labels = np.argmax(predictions[i], axis=1).flatten()\n","  rounded_labels_set.extend(rounded_labels)\n","  # Calculate and store the coef for this batch.\n","  rounded_predictions = true_labels[i].flatten()\n","  rounded_predictions_set.extend(rounded_predictions)\n","\n","labels = 라벨링\n","\n","print(\"\")\n","print(classification_report(rounded_labels_set, rounded_predictions_set, target_names=labels))\n","print(\"\")\n","\n","\n","## 혼란 매트릭스 - Confusion matrix\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix\n","\n","\n","# For each input batch...\n","for i in range(len(true_labels)):\n","\n","  # The predictions for this batch are a 2-column ndarray (one column for \"0\"\n","  # and one column for \"1\"). Pick the label with the highest value and turn this\n","  # in to a list of 0s and 1s.\n","  rounded_labels = np.argmax(predictions[i], axis=1).flatten()\n","  rounded_labels_set.extend(rounded_labels)\n","  # Calculate and store the coef for this batch.\n","  rounded_predictions = true_labels[i].flatten()\n","  rounded_predictions_set.extend(rounded_predictions)\n","\n","from sklearn.metrics import confusion_matrix\n","cm = confusion_matrix(rounded_labels_set, rounded_predictions_set)\n","\n","def plot_confusion_matrix(\n","    ax, matrix, labels, title='Confusion matrix', fontsize=9):\n","\n","    ax.set_xticks([x for x in range(len(labels))])\n","    ax.set_yticks([y for y in range(len(labels))])\n","\n","    # Place labels on minor ticks\n","    ax.set_xticks([x + 0.5 for x in range(len(labels))], minor=True)\n","    ax.set_xticklabels(labels, rotation=90, fontsize=fontsize, minor=True)  # rotation must be num not str\n","    ax.set_yticks([y + 0.5 for y in range(len(labels))], minor=True)\n","    ax.set_yticklabels(labels[::-1], fontsize=fontsize, minor=True)\n","\n","    # Hide major tick labels\n","    ax.tick_params(which='major', labelbottom='off', labelleft='off')\n","\n","    # Finally, hide minor tick marks\n","    ax.tick_params(which='minor', width=0)\n","\n","    # Plot heat map\n","    proportions = [1. * row / sum(row) for row in matrix]\n","    ax.pcolor(np.array(proportions[::-1]), cmap=plt.cm.Reds)\n","\n","    # Plot counts as text\n","    for row in range(len(matrix)):\n","        for col in range(len(matrix[row])):\n","            confusion = matrix[::-1][row][col]\n","            if confusion != 0:\n","                ax.text(col + 0.5, row + 0.5, int(confusion),\n","                        fontsize=fontsize,\n","                        horizontalalignment='center',\n","                        verticalalignment='center')\n","\n","    # Add finishing touches\n","    ax.grid(True, linestyle=':')\n","    ax.set_title(title, fontsize=fontsize)\n","    ax.set_xlabel('prediction', fontsize=fontsize)\n","    ax.set_ylabel('actual', fontsize=fontsize)\n","\n","    plt.show()\n","\n","\n","if __name__ == '__main__':\n","    matrix = cm\n","    labels = 라벨링\n","\n","    fig, ax = plt.subplots(figsize=(6, 6))\n","\n","    plot_confusion_matrix(ax, matrix, labels, fontsize=10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":897},"id":"-dg703oJ_weJ","executionInfo":{"status":"ok","timestamp":1690959573041,"user_tz":-540,"elapsed":47444,"user":{"displayName":"지해인","userId":"10118119697182884789"}},"outputId":"e1ac85ca-81bd-4f64-fe27-61f7a659ed7d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  Batch   100  of    233.    Elapsed: 0:00:20.\n","  Batch   200  of    233.    Elapsed: 0:00:40.\n","\n","##### 테스트 모델을 통한 모델 정확도 #####\n","Accuracy: 0.64\n","Test took: 0:00:46\n","\n","              precision    recall  f1-score   support\n","\n","        bosu       0.71      0.58      0.64      8005\n","       jinbo       0.59      0.72      0.65      6867\n","\n","    accuracy                           0.64     14872\n","   macro avg       0.65      0.65      0.64     14872\n","weighted avg       0.65      0.64      0.64     14872\n","\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}